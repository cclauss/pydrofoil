from pydrofoil.absinterp import analyze, BOOL, UNBOUNDED, TRUE, FALSE, Range
from pydrofoil.absinterp import optimize_with_range_info
from pydrofoil.test.test_ir import compare, FakeCodeGen

from pydrofoil.types import *
from pydrofoil.ir import *

fakecodegen = FakeCodeGen()

def test_analyze_stageoa():
    zia = Argument('zia', SmallFixedBitVector(64))
    zaddress = Argument('zaddress', SmallFixedBitVector(52))
    mi = Argument("mi", MachineInt())
    block2 = Block()
    block3 = Block()
    block4 = Block()
    block5 = Block()
    block6 = Block()
    block7 = Block()
    block8 = Block()
    block9 = Block()
    block10 = Block()
    block11 = Block()
    block12 = Block()
    block13 = Block()
    i24 = block2.emit(Operation, '@lteq', [MachineIntConstant(0), mi], Bool(), '`7 9343:23-9343:35', 'zz435')
    block2.next = ConditionalGoto(i24, block3, block13, '`7 9343:23-9343:51')
    i26 = block3.emit(Operation, '@lteq', [mi, MachineIntConstant(51)], Bool(), '`7 9343:38-9343:51', 'zz436')
    block3.next = ConditionalGoto(i26, block4, block13, '`7 9342:4-9346:14')
    i29 = block4.emit(Operation, '@sub_i_i_must_fit', [mi, MachineIntConstant(1)], MachineInt(), '`7 9344:22-9344:38', 'zz431')
    i30 = block4.emit(Operation, '@lteq', [MachineIntConstant(0), i29], Bool(), '`7 9344:22-9344:38', 'zz423')
    block4.next = ConditionalGoto(i30, block5, block12, '`7 9342:4-9346:14')
    i35 = block5.emit(Operation, '@sub_i_i_wrapped_res', [MachineIntConstant(51), mi], Int(), '`4 166:45-166:48', 'zz418')
    i36 = block5.emit(Operation, '@add_o_i_wrapped_res', [i35, MachineIntConstant(1)], Int(), '`4 166:45-166:50', 'zz417')
    i38 = block5.emit(Operation, '@gteq', [i36, IntConstant(52)], Bool(), '`2 336:5-336:11', 'zz40')
    block5.next = ConditionalGoto(i38, block6, block11, '`2 336:2-341:3')
    i40 = block6.emit(Operation, '@shiftl_bv_i', [SmallBitVectorConstant(0xfffffffffffff, SmallFixedBitVector(52)), MachineIntConstant(52), mi], SmallFixedBitVector(52), '`2 337:4-337:35', 'return')
    block6.next = Goto(block7, None)
    i41 = block7.emit_phi([block11, block6], [None, i40], SmallFixedBitVector(52))
    i42 = block7.emit(Operation, '@and_vec_bv_bv', [zaddress, i41], SmallFixedBitVector(52), '`4 166:27-166:51', 'zz414')
    i43 = block7.emit(Operation, '@shiftr_bv_i', [i42, MachineIntConstant(52), mi], SmallFixedBitVector(52), '`4 166:11-166:55', 'zz40')
    i44 = block7.emit(Operation, '@add_i_i_wrapped_res', [i29, MachineIntConstant(1)], Int(), '`4 167:46-167:53', 'zz411')
    i46 = block7.emit(Operation, '@gteq', [i44, IntConstant(64)], Bool(), '`2 336:5-336:11', 'zz40')
    block7.next = ConditionalGoto(i46, block8, block10, '`2 336:2-341:3')
    block8.next = Goto(block9, None)
    i48 = block9.emit_phi([block10, block8], [None, SmallBitVectorConstant(r_uint(0xffffffffffffffff), SmallFixedBitVector(64))], SmallFixedBitVector(64))
    i49 = block9.emit(Operation, '@and_vec_bv_bv', [zia, i48], SmallFixedBitVector(64), '`4 167:27-167:54', 'zz48')
    i51 = block9.emit(Operation, '@add_i_i_must_fit', [i29, MachineIntConstant(1)], MachineInt(), '`4 168:31-168:42', 'zz45')
    i52 = block9.emit(Operation, '@shiftl_bv_i', [i43, MachineIntConstant(52), i51], SmallFixedBitVector(52), '`4 168:2-168:43', 'zz42')
    i54 = block9.emit(Operation, '@truncate_bv_i', [i49, MachineIntConstant(52)], SmallFixedBitVector(52), '`4 80:17-80:31', 'return')
    i55 = block9.emit(Operation, '@or_vec_bv_bv', [i52, i54], SmallFixedBitVector(52), '`4 168:2-168:58', 'return')
    block9.next = Return(i55, None)
    i58 = block10.emit(Operation, 'int_to_int64', [i44], MachineInt(), None, None)
    i59 = block10.emit(Operation, '@shiftl_bv_i', [SmallBitVectorConstant(0x1, SmallFixedBitVector(64)), MachineIntConstant(64), i58], SmallFixedBitVector(64), '`2 340:28-340:50', 'zz44')
    i60 = block10.emit(Operation, '@sub_bits_bv_bv', [i59, SmallBitVectorConstant(0x1, SmallFixedBitVector(64)), MachineIntConstant(64)], SmallFixedBitVector(64), '`2 340:19-340:56', 'zz43')
    i48.prevvalues[0] = i60
    block10.next = Goto(block9, None)
    i62 = block11.emit(Operation, 'int_to_int64', [i36], MachineInt(), None, None)
    i63 = block11.emit(Operation, '@shiftl_bv_i', [SmallBitVectorConstant(0x1, SmallFixedBitVector(52)), MachineIntConstant(52), i62], SmallFixedBitVector(52), '`2 340:28-340:50', 'zz44')
    i64 = block11.emit(Operation, '@sub_bits_bv_bv', [i63, SmallBitVectorConstant(0x1, SmallFixedBitVector(52)), MachineIntConstant(52)], SmallFixedBitVector(52), '`2 340:19-340:56', 'zz43')
    i65 = block11.emit(Operation, '@shiftl_bv_i', [i64, MachineIntConstant(52), mi], SmallFixedBitVector(52), '`2 340:4-340:60', 'return')
    i41.prevvalues[0] = i65
    block11.next = Goto(block7, None)
    block12.next = Raise(StringConstant('src/v8_base.sail:9344.39-9344.40'), None)
    block13.next = Raise(StringConstant('src/v8_base.sail:9343.53-9343.54'), None)
    graph = Graph('zStageOA', [zia, zaddress, mi], block2)
    values = analyze(graph)
    assert values[block2][i24] == BOOL
    assert values[block3][mi] == Range(0, None)
    assert values[block4][mi] == Range(0, 51)
    assert values[block4][i29] == Range(-1, 50)
    assert values[block5][i29] == Range(0, 50)
    assert values[block5][i35] == Range(0, 51)
    assert values[block5][i36] == Range(1, 52)
    assert values[block7][i44] == Range(1, 51)
    assert values[block7][i46] == FALSE
    assert block8 not in values
    assert values[block9][i51] == Range(1, 51)

    res = optimize_with_range_info(graph, fakecodegen)
    light_simplify(graph, fakecodegen)
    assert res
    compare(graph, """
zia = Argument('zia', SmallFixedBitVector(64))
zaddress = Argument('zaddress', SmallFixedBitVector(52))
mi = Argument('mi', MachineInt())
block0 = Block()
block1 = Block()
block2 = Block()
block3 = Block()
block4 = Block()
block5 = Block()
block6 = Block()
block7 = Block()
block8 = Block()
i3 = block0.emit(Operation, '@lteq', [MachineIntConstant(0), mi], Bool(), '`7 9343:23-9343:35', 'zz435')
block0.next = ConditionalGoto(i3, block1, block8, '`7 9343:23-9343:51')
i4 = block1.emit(Operation, '@lteq', [mi, MachineIntConstant(51)], Bool(), '`7 9343:38-9343:51', 'zz436')
block1.next = ConditionalGoto(i4, block2, block8, '`7 9342:4-9346:14')
i5 = block2.emit(Operation, '@sub_i_i_must_fit', [mi, MachineIntConstant(1)], MachineInt(), '`7 9344:22-9344:38', 'zz431')
i6 = block2.emit(Operation, '@lteq', [MachineIntConstant(0), i5], Bool(), '`7 9344:22-9344:38', 'zz423')
block2.next = ConditionalGoto(i6, block3, block7, '`7 9342:4-9346:14')
i7 = block3.emit(Operation, '@sub_i_i_must_fit', [MachineIntConstant(51), mi], MachineInt(), '`4 166:45-166:48', 'zz418')
i8 = block3.emit(Operation, '@add_i_i_must_fit', [i7, MachineIntConstant(1)], MachineInt(), '`4 166:45-166:50', 'zz417')
i9 = block3.emit(Operation, '@gteq', [i8, MachineIntConstant(52)], Bool(), '`2 336:5-336:11', 'zz40')
block3.next = ConditionalGoto(i9, block4, block6, '`2 336:2-341:3')
i10 = block4.emit(Operation, '@shiftl_bv_i', [SmallBitVectorConstant(0xfffffffffffff, SmallFixedBitVector(52)), MachineIntConstant(52), mi], SmallFixedBitVector(52), '`2 337:4-337:35', 'return')
block4.next = Goto(block5, None)
i11 = block5.emit_phi([block6, block4], [None, i10], SmallFixedBitVector(52))
i12 = block5.emit(Operation, '@and_vec_bv_bv', [zaddress, i11], SmallFixedBitVector(52), '`4 166:27-166:51', 'zz414')
i13 = block5.emit(Operation, '@shiftr_bv_i', [i12, MachineIntConstant(52), mi], SmallFixedBitVector(52), '`4 166:11-166:55', 'zz40')
i14 = block5.emit(Operation, '@add_i_i_must_fit', [i5, MachineIntConstant(1)], MachineInt(), '`4 167:46-167:53', 'zz411')
i15 = block5.emit(Operation, '@shiftl_bv_i', [SmallBitVectorConstant(0x1, SmallFixedBitVector(64)), MachineIntConstant(64), i14], SmallFixedBitVector(64), '`2 340:28-340:50', 'zz44')
i16 = block5.emit(Operation, '@sub_bits_bv_bv', [i15, SmallBitVectorConstant(0x1, SmallFixedBitVector(64)), MachineIntConstant(64)], SmallFixedBitVector(64), '`2 340:19-340:56', 'zz43')
i17 = block5.emit(Operation, '@and_vec_bv_bv', [zia, i16], SmallFixedBitVector(64), '`4 167:27-167:54', 'zz48')
i18 = block5.emit(Operation, '@shiftl_bv_i', [i13, MachineIntConstant(52), i14], SmallFixedBitVector(52), '`4 168:2-168:43', 'zz42')
i19 = block5.emit(Operation, '@truncate_bv_i', [i17, MachineIntConstant(52)], SmallFixedBitVector(52), '`4 80:17-80:31', 'return')
i20 = block5.emit(Operation, '@or_vec_bv_bv', [i18, i19], SmallFixedBitVector(52), '`4 168:2-168:58', 'return')
block5.next = Return(i20, None)
i21 = block6.emit(Operation, '@shiftl_bv_i', [SmallBitVectorConstant(0x1, SmallFixedBitVector(52)), MachineIntConstant(52), i8], SmallFixedBitVector(52), '`2 340:28-340:50', 'zz44')
i22 = block6.emit(Operation, '@sub_bits_bv_bv', [i21, SmallBitVectorConstant(0x1, SmallFixedBitVector(52)), MachineIntConstant(52)], SmallFixedBitVector(52), '`2 340:19-340:56', 'zz43')
i23 = block6.emit(Operation, '@shiftl_bv_i', [i22, MachineIntConstant(52), mi], SmallFixedBitVector(52), '`2 340:4-340:60', 'return')
i11.prevvalues[0] = i23
block6.next = Goto(block5, None)
block7.next = Raise(StringConstant('src/v8_base.sail:9344.39-9344.40'), None)
block8.next = Raise(StringConstant('src/v8_base.sail:9343.53-9343.54'), None)
graph = Graph('zStageOA', [zia, zaddress, mi], block0)
""")


def test_add_with_carry32():
    zx = Argument('zx', SmallFixedBitVector(32))
    zy = Argument('zy', SmallFixedBitVector(32))
    zcarry_in = Argument('zcarry_in', SmallFixedBitVector(1))
    block0 = Block()
    block1 = Block()
    block2 = Block()
    block3 = Block()
    block4 = Block()
    block5 = Block()
    block6 = Block()
    block7 = Block()
    block8 = Block()
    block9 = Block()
    i3 = block0.emit(Operation, '@unsigned_bv', [zx, MachineIntConstant(32)], MachineInt(), '`7 147805:24-147805:31', 'zz470')
    i4 = block0.emit(Operation, '@unsigned_bv', [zy, MachineIntConstant(32)], MachineInt(), '`7 147805:34-147805:41', 'zz471')
    i5 = block0.emit(Operation, '@add_i_i_wrapped_res', [i3, i4], Int(), '`7 147805:24-147805:41', 'zz465')
    i6 = block0.emit(Operation, '@unsigned_bv', [zcarry_in, MachineIntConstant(1)], MachineInt(), '`7 147805:44-147805:58', 'zz469')
    i7 = block0.emit(Operation, '@add_o_i_wrapped_res', [i5, i6], Int(), '`7 147805:24-147805:58', 'zz40')
    i8 = block0.emit(Operation, '@signed_bv', [zx, MachineIntConstant(32)], MachineInt(), '`7 147806:22-147806:29', 'zz463')
    i9 = block0.emit(Operation, '@signed_bv', [zy, MachineIntConstant(32)], MachineInt(), '`7 147806:32-147806:39', 'zz464')
    i10 = block0.emit(Operation, '@add_i_i_wrapped_res', [i8, i9], Int(), '`7 147806:22-147806:39', 'zz458')
    i11 = block0.emit(Operation, '@add_o_i_wrapped_res', [i10, i6], Int(), '`7 147806:22-147806:56', 'zz43')
    i12 = block0.emit(Comment, 'inlined zinteger_subrange', [], Unit(), None, None)
    i13 = block0.emit(Operation, '@get_slice_int_i_o_i_unwrapped_res', [MachineIntConstant(32), i7, MachineIntConstant(0)], SmallFixedBitVector(32), '`5 176:39-176:72', 'return')
    i14 = block0.emit(Operation, '@vector_access_bv_i', [i13, MachineIntConstant(31)], SmallFixedBitVector(1), '`7 147808:23-147808:37', 'zz448')
    i15 = block0.emit(Comment, 'inlined zinteger_subrange', [], Unit(), None, None)
    i16 = block0.emit(Comment, 'inlined zIsZero', [], Unit(), None, None)
    i17 = block0.emit(Operation, '@eq_bits_bv_bv', [i13, SmallBitVectorConstant(0x0, SmallFixedBitVector(32))], Bool(), '`5 164:22-164:41', 'return')
    block0.next = ConditionalGoto(i17, block1, block9, '`7 147809:22-147809:57')
    block1.next = Goto(block2, None)
    i18 = block2.emit_phi([block9, block1], [SmallBitVectorConstant(0b0, SmallFixedBitVector(1)), SmallBitVectorConstant(0b1, SmallFixedBitVector(1))], SmallFixedBitVector(1))
    i19 = block2.emit(Comment, 'inlined zinteger_subrange', [], Unit(), None, None)
    i20 = block2.emit(Operation, '@unsigned_bv', [i13, MachineIntConstant(32)], MachineInt(), '`7 147810:25-147810:37', 'zz436')
    i21 = block2.emit(Operation, '@eq_int_o_i', [i7, i20], Bool(), '`7 147810:25-147810:53', 'zz435')
    block2.next = ConditionalGoto(i21, block3, block8, '`7 147810:22-147810:71')
    block3.next = Goto(block4, None)
    i22 = block4.emit_phi([block8, block3], [SmallBitVectorConstant(0b1, SmallFixedBitVector(1)), SmallBitVectorConstant(0b0, SmallFixedBitVector(1))], SmallFixedBitVector(1))
    i23 = block4.emit(Comment, 'inlined zinteger_subrange', [], Unit(), None, None)
    i24 = block4.emit(Operation, '@signed_bv', [i13, MachineIntConstant(32)], MachineInt(), '`7 147811:25-147811:37', 'zz429')
    i25 = block4.emit(Operation, '@eq_int_o_i', [i11, i24], Bool(), '`7 147811:25-147811:51', 'zz428')
    block4.next = ConditionalGoto(i25, block5, block7, '`7 147811:22-147811:69')
    block5.next = Goto(block6, None)
    i26 = block6.emit_phi([block7, block5], [SmallBitVectorConstant(0b1, SmallFixedBitVector(1)), SmallBitVectorConstant(0b0, SmallFixedBitVector(1))], SmallFixedBitVector(1))
    i27 = block6.emit(Comment, 'inlined zinteger_subrange', [], Unit(), None, None)
    i28 = block6.emit(Operation, '@bitvector_concat_bv_bv', [i14, MachineIntConstant(1), i18], SmallFixedBitVector(2), '`7 147812:22-147812:27', 'zz423')
    i29 = block6.emit(Operation, '@bitvector_concat_bv_bv', [i28, MachineIntConstant(1), i22], SmallFixedBitVector(3), '`7 147812:21-147812:32', 'zz420')
    i30 = block6.emit(Operation, '@bitvector_concat_bv_bv', [i29, MachineIntConstant(1), i26], SmallFixedBitVector(4), '`7 147812:20-147812:37', 'zz416')
    i31 = block6.emit(StructConstruction, 'tup_ztuplez3z5bv_z5bv4_bv32_o', [i13, i30], Struct('tup_ztuplez3z5bv_z5bv4_bv32_o', ('bv32_0', 'o_1'), (SmallFixedBitVector(32), SmallFixedBitVector(4)), True), None, None)
    block6.next = Return(i31, None)
    block7.next = Goto(block6, None)
    block8.next = Goto(block4, None)
    block9.next = Goto(block2, None)
    graph = Graph('zAddWithCarry_specialized_bv32_bv32_o__tup_bv32_o_put', [zx, zy, zcarry_in], block0)

    values = analyze(graph)
    assert values[block0][i3] == Range(0, 2**32-1)
    assert values[block0][i6] == Range(0, 1)
    assert values[block0][i5] == Range(0, (2**32-1) * 2)
    assert values[block0][i7] == Range(0, (2**32-1) * 2 + 1)
    assert values[block0][i8] == Range(-2**31, 2**31-1)
    assert values[block0][i9] == Range(-2**31, 2**31-1)
    assert values[block0][i10] == Range(-2**32, 2**32-2)
    assert values[block0][i11] == Range(-2**32, 2**32-1)

    res = optimize_with_range_info(graph, fakecodegen)
    light_simplify(graph, fakecodegen)
    assert res
    compare(graph, """
zx = Argument('zx', SmallFixedBitVector(32))
zy = Argument('zy', SmallFixedBitVector(32))
zcarry_in = Argument('zcarry_in', SmallFixedBitVector(1))
block0 = Block()
block1 = Block()
block2 = Block()
block3 = Block()
block4 = Block()
block5 = Block()
block6 = Block()
block7 = Block()
block8 = Block()
block9 = Block()
i3 = block0.emit(Operation, '@unsigned_bv', [zx, MachineIntConstant(32)], MachineInt(), '`7 147805:24-147805:31', 'zz470')
i4 = block0.emit(Operation, '@unsigned_bv', [zy, MachineIntConstant(32)], MachineInt(), '`7 147805:34-147805:41', 'zz471')
i5 = block0.emit(Operation, '@add_i_i_must_fit', [i3, i4], MachineInt(), '`7 147805:24-147805:41', 'zz465')
i6 = block0.emit(Operation, '@unsigned_bv', [zcarry_in, MachineIntConstant(1)], MachineInt(), '`7 147805:44-147805:58', 'zz469')
i7 = block0.emit(Operation, '@add_i_i_must_fit', [i5, i6], MachineInt(), '`7 147805:24-147805:58', 'zz40')
i8 = block0.emit(Operation, '@signed_bv', [zx, MachineIntConstant(32)], MachineInt(), '`7 147806:22-147806:29', 'zz463')
i9 = block0.emit(Operation, '@signed_bv', [zy, MachineIntConstant(32)], MachineInt(), '`7 147806:32-147806:39', 'zz464')
i10 = block0.emit(Operation, '@add_i_i_must_fit', [i8, i9], MachineInt(), '`7 147806:22-147806:39', 'zz458')
i11 = block0.emit(Operation, '@add_i_i_must_fit', [i10, i6], MachineInt(), '`7 147806:22-147806:56', 'zz43')
i12 = block0.emit(Comment, 'inlined zinteger_subrange', [], Unit(), None, None)
i13 = block0.emit(Operation, '@get_slice_int_i_i_i', [MachineIntConstant(32), i7, MachineIntConstant(0)], SmallFixedBitVector(32), '`5 176:39-176:72', 'return')
i14 = block0.emit(Operation, '@vector_access_bv_i', [i13, MachineIntConstant(31)], SmallFixedBitVector(1), '`7 147808:23-147808:37', 'zz448')
i15 = block0.emit(Comment, 'inlined zinteger_subrange', [], Unit(), None, None)
i16 = block0.emit(Comment, 'inlined zIsZero', [], Unit(), None, None)
i17 = block0.emit(Operation, '@eq_bits_bv_bv', [i13, SmallBitVectorConstant(0x0, SmallFixedBitVector(32))], Bool(), '`5 164:22-164:41', 'return')
block0.next = ConditionalGoto(i17, block1, block9, '`7 147809:22-147809:57')
block1.next = Goto(block2, None)
i18 = block2.emit_phi([block9, block1], [SmallBitVectorConstant(0b0, SmallFixedBitVector(1)), SmallBitVectorConstant(0b1, SmallFixedBitVector(1))], SmallFixedBitVector(1))
i19 = block2.emit(Comment, 'inlined zinteger_subrange', [], Unit(), None, None)
i20 = block2.emit(Operation, '@unsigned_bv', [i13, MachineIntConstant(32)], MachineInt(), '`7 147810:25-147810:37', 'zz436')
i21 = block2.emit(Operation, '@eq', [i7, i20], Bool(), '`7 147810:25-147810:53', 'zz435')
block2.next = ConditionalGoto(i21, block3, block8, '`7 147810:22-147810:71')
block3.next = Goto(block4, None)
i22 = block4.emit_phi([block8, block3], [SmallBitVectorConstant(0b1, SmallFixedBitVector(1)), SmallBitVectorConstant(0b0, SmallFixedBitVector(1))], SmallFixedBitVector(1))
i23 = block4.emit(Comment, 'inlined zinteger_subrange', [], Unit(), None, None)
i24 = block4.emit(Operation, '@signed_bv', [i13, MachineIntConstant(32)], MachineInt(), '`7 147811:25-147811:37', 'zz429')
i25 = block4.emit(Operation, '@eq', [i11, i24], Bool(), '`7 147811:25-147811:51', 'zz428')
block4.next = ConditionalGoto(i25, block5, block7, '`7 147811:22-147811:69')
block5.next = Goto(block6, None)
i26 = block6.emit_phi([block7, block5], [SmallBitVectorConstant(0b1, SmallFixedBitVector(1)), SmallBitVectorConstant(0b0, SmallFixedBitVector(1))], SmallFixedBitVector(1))
i27 = block6.emit(Comment, 'inlined zinteger_subrange', [], Unit(), None, None)
i28 = block6.emit(Operation, '@bitvector_concat_bv_bv', [i14, MachineIntConstant(1), i18], SmallFixedBitVector(2), '`7 147812:22-147812:27', 'zz423')
i29 = block6.emit(Operation, '@bitvector_concat_bv_bv', [i28, MachineIntConstant(1), i22], SmallFixedBitVector(3), '`7 147812:21-147812:32', 'zz420')
i30 = block6.emit(Operation, '@bitvector_concat_bv_bv', [i29, MachineIntConstant(1), i26], SmallFixedBitVector(4), '`7 147812:20-147812:37', 'zz416')
i31 = block6.emit(StructConstruction, 'tup_ztuplez3z5bv_z5bv4_bv32_o', [i13, i30], Struct('tup_ztuplez3z5bv_z5bv4_bv32_o', ('bv32_0', 'o_1'), (SmallFixedBitVector(32), SmallFixedBitVector(4)), True), None, None)
block6.next = Return(i31, None)
block7.next = Goto(block6, None)
block8.next = Goto(block4, None)
block9.next = Goto(block2, None)
graph = Graph('zAddWithCarry_specialized_bv32_bv32_o__tup_bv32_o_put', [zx, zy, zcarry_in], block0)
""")

def test_startlevel():
    zwalkparams = Argument('zwalkparams', Struct('zS1TTWParams', ('zcmow', 'zdc', 'zdct', 'zds', 'ze0pd', 'zee', 'zepan', 'zha', 'zhd', 'zhpd', 'zirgn', 'zmair', 'znfd', 'zntlsmd', 'znv1', 'zorgn', 'zps', 'zsh', 'zsif', 'zt0szz', 'zt1szz', 'ztbi', 'ztbid', 'ztgx', 'ztxszz', 'zuwxn', 'zwxn'), (SmallFixedBitVector(1), SmallFixedBitVector(1), SmallFixedBitVector(1), SmallFixedBitVector(1), SmallFixedBitVector(1), SmallFixedBitVector(1), SmallFixedBitVector(1), SmallFixedBitVector(1), SmallFixedBitVector(1), SmallFixedBitVector(1), SmallFixedBitVector(2), SmallFixedBitVector(64), SmallFixedBitVector(1), SmallFixedBitVector(1), SmallFixedBitVector(1), SmallFixedBitVector(2), SmallFixedBitVector(3), SmallFixedBitVector(2), SmallFixedBitVector(1), SmallFixedBitVector(3), SmallFixedBitVector(3), SmallFixedBitVector(1), SmallFixedBitVector(1), Enum('zTGx', ('zTGx_4KB', 'zTGx_16KB', 'zTGx_64KB')), SmallFixedBitVector(6), SmallFixedBitVector(1), SmallFixedBitVector(1))))
    block0 = Block()
    block1 = Block()
    block2 = Block()
    block3 = Block()
    block4 = Block()
    block5 = Block()
    block6 = Block()
    block7 = Block()
    block8 = Block()
    i1 = block0.emit(FieldAccess, 'ztxszz', [zwalkparams], SmallFixedBitVector(6), None, None)
    i3 = block0.emit(Operation, '@unsigned_bv', [i1, MachineIntConstant(6)], MachineInt(), '`7 9030:16-9030:26', 'zz47')
    i4 = block0.emit(Operation, '@sub_i_i_must_fit', [MachineIntConstant(64), i3], MachineInt(), '`7 9030:11-9030:26', 'zz45')
    i5 = block0.emit(FieldAccess, 'ztgx', [zwalkparams], Enum('zTGx', ('zTGx_4KB', 'zTGx_16KB', 'zTGx_64KB')), None, None)
    i7 = block0.emit(Operation, '@eq', [EnumConstant('zTGx_4KB', Enum('zTGx', ('zTGx_4KB', 'zTGx_16KB', 'zTGx_64KB'))), i5], Bool(), '`7 9061:6-9061:13', None)
    block0.next = ConditionalGoto(i7, block1, block6, '`7 9061:6-9061:13')
    block1.next = Goto(block2, None)
    i8 = block2.emit_phi([block1, block7, block8], [IntConstant(9), IntConstant(11), IntConstant(13)], Int())
    i9 = block2.emit_phi([block1, block7, block8], [MachineIntConstant(12), MachineIntConstant(14), MachineIntConstant(16)], MachineInt())
    i10 = block2.emit(Operation, '@sub_i_i_wrapped_res', [i4, MachineIntConstant(1)], Int(), '`7 9394:29-9394:39', 'zz413')
    i11 = block2.emit(Operation, '@sub_o_i_wrapped_res', [i10, i9], Int(), '`7 9394:29-9394:53', 'zz412')
    i13 = block2.emit(Operation, '@lt', [i11, IntConstant(0)], Bool(), '`1 185:5-185:10', 'zz414')
    block2.next = ConditionalGoto(i13, block3, block5, '`1 185:5-185:18')
    i14 = block3.emit(Operation, '@add_o_i_wrapped_res', [i11, MachineIntConstant(1)], Int(), '`1 186:13-186:18', 'zz43')
    i15 = block3.emit(Operation, 'tdiv_int', [i14, i8], Int(), '`1 186:4-186:22', 'zz41')
    i16 = block3.emit(Operation, '@sub_o_i_wrapped_res', [i15, MachineIntConstant(1)], Int(), '`1 186:4-186:26', 'return')
    block3.next = Goto(block4, None)
    i17 = block4.emit_phi([block5, block3], [None, i16], Int())
    i18 = block4.emit(Operation, '@sub_i_o_wrapped_res', [MachineIntConstant(3), i17], Int(), '`7 9394:11-9394:62', 'zz49')
    block4.next = Return(i18, None)
    i19 = block5.emit(Operation, 'tdiv_int', [i11, i8], Int(), '`1 190:4-190:18', 'return')
    i17.prevvalues[0] = i19
    block5.next = Goto(block4, None)
    i20 = block6.emit(Operation, '@eq', [EnumConstant('zTGx_16KB', Enum('zTGx', ('zTGx_4KB', 'zTGx_16KB', 'zTGx_64KB'))), i5], Bool(), '`7 9064:6-9064:14', None)
    block6.next = ConditionalGoto(i20, block7, block8, '`7 9064:6-9064:14')
    block7.next = Goto(block2, None)
    block8.next = Goto(block2, None)
    graph = Graph('zAArch64_S1StartLevel_specialized_o', [zwalkparams], block0)
    values = analyze(graph)
    assert values[block2][i8] == Range(9, 13)
    assert values[block2][i9] == Range(12, 16)
    assert values[block2][i11] == Range(-16, 51)
    assert values[block3][i11] == Range(-16, -1)
    assert values[block3][i15] == Range(-15, 0)
    assert values[block3][i16] == Range(-16, -1)
    assert values[block5][i11] == Range(0, 51)
    assert values[block5][i19] == Range(0, 51)
    assert values[block4][i17] == Range(-16, 51)
    assert values[block4][i18] == Range(-48, 19)
    
    res = optimize_with_range_info(graph, fakecodegen)
    light_simplify(graph, fakecodegen)
    assert res
    res = optimize_with_range_info(graph, fakecodegen)
    light_simplify(graph, fakecodegen)
    assert res
    compare(graph, """
zwalkparams = Argument('zwalkparams', Struct('zS1TTWParams', ('zcmow', 'zdc', 'zdct', 'zds', 'ze0pd', 'zee', 'zepan', 'zha', 'zhd', 'zhpd', 'zirgn', 'zmair', 'znfd', 'zntlsmd', 'znv1', 'zorgn', 'zps', 'zsh', 'zsif', 'zt0szz', 'zt1szz', 'ztbi', 'ztbid', 'ztgx', 'ztxszz', 'zuwxn', 'zwxn'), (SmallFixedBitVector(1), SmallFixedBitVector(1), SmallFixedBitVector(1), SmallFixedBitVector(1), SmallFixedBitVector(1), SmallFixedBitVector(1), SmallFixedBitVector(1), SmallFixedBitVector(1), SmallFixedBitVector(1), SmallFixedBitVector(1), SmallFixedBitVector(2), SmallFixedBitVector(64), SmallFixedBitVector(1), SmallFixedBitVector(1), SmallFixedBitVector(1), SmallFixedBitVector(2), SmallFixedBitVector(3), SmallFixedBitVector(2), SmallFixedBitVector(1), SmallFixedBitVector(3), SmallFixedBitVector(3), SmallFixedBitVector(1), SmallFixedBitVector(1), Enum('zTGx', ('zTGx_4KB', 'zTGx_16KB', 'zTGx_64KB')), SmallFixedBitVector(6), SmallFixedBitVector(1), SmallFixedBitVector(1))))
block0 = Block()
block1 = Block()
block2 = Block()
block3 = Block()
block4 = Block()
block5 = Block()
block6 = Block()
block7 = Block()
block8 = Block()
i1 = block0.emit(FieldAccess, 'ztxszz', [zwalkparams], SmallFixedBitVector(6), None, None)
i2 = block0.emit(Operation, '@unsigned_bv', [i1, MachineIntConstant(6)], MachineInt(), '`7 9030:16-9030:26', 'zz47')
i3 = block0.emit(Operation, '@sub_i_i_must_fit', [MachineIntConstant(64), i2], MachineInt(), '`7 9030:11-9030:26', 'zz45')
i4 = block0.emit(FieldAccess, 'ztgx', [zwalkparams], Enum('zTGx', ('zTGx_4KB', 'zTGx_16KB', 'zTGx_64KB')), None, None)
i5 = block0.emit(Operation, '@eq', [EnumConstant('zTGx_4KB', Enum('zTGx', ('zTGx_4KB', 'zTGx_16KB', 'zTGx_64KB'))), i4], Bool(), '`7 9061:6-9061:13', None)
block0.next = ConditionalGoto(i5, block1, block6, '`7 9061:6-9061:13')
block1.next = Goto(block2, None)
i6 = block2.emit_phi([block1, block7, block8], [MachineIntConstant(9), MachineIntConstant(11), MachineIntConstant(13)], MachineInt())
i7 = block2.emit_phi([block1, block7, block8], [MachineIntConstant(12), MachineIntConstant(14), MachineIntConstant(16)], MachineInt())
i8 = block2.emit(Operation, '@sub_i_i_must_fit', [i3, MachineIntConstant(1)], MachineInt(), '`7 9394:29-9394:39', 'zz413')
i9 = block2.emit(Operation, '@sub_i_i_must_fit', [i8, i7], MachineInt(), '`7 9394:29-9394:53', 'zz412')
i10 = block2.emit(Operation, '@lt', [i9, MachineIntConstant(0)], Bool(), '`1 185:5-185:10', 'zz414')
block2.next = ConditionalGoto(i10, block3, block5, '`1 185:5-185:18')
i11 = block3.emit(Operation, '@add_i_i_must_fit', [i9, MachineIntConstant(1)], MachineInt(), '`1 186:13-186:18', 'zz43')
i12 = block3.emit(Operation, '@tdiv_int_i_ipos', [i11, i6], MachineInt(), '`1 186:4-186:22', 'zz41')
i13 = block3.emit(Operation, '@sub_i_i_must_fit', [i12, MachineIntConstant(1)], MachineInt(), '`1 186:4-186:26', 'return')
block3.next = Goto(block4, None)
i14 = block4.emit_phi([block5, block3], [None, i13], MachineInt())
i15 = block4.emit(Operation, '@sub_i_i_must_fit', [MachineIntConstant(3), i14], MachineInt(), '`7 9394:11-9394:62', 'zz49')
i16 = block4.emit(Operation, 'zz5i64zDzKz5i', [i15], Int(), None, None)
block4.next = Return(i16, None)
i17 = block5.emit(Operation, '@tdiv_int_i_ipos', [i9, i6], MachineInt(), '`1 190:4-190:18', 'return')
i14.prevvalues[0] = i17
block5.next = Goto(block4, None)
i18 = block6.emit(Operation, '@eq', [EnumConstant('zTGx_16KB', Enum('zTGx', ('zTGx_4KB', 'zTGx_16KB', 'zTGx_64KB'))), i4], Bool(), '`7 9064:6-9064:14', None)
block6.next = ConditionalGoto(i18, block7, block8, '`7 9064:6-9064:14')
block7.next = Goto(block2, None)
block8.next = Goto(block2, None)
graph = Graph('zAArch64_S1StartLevel_specialized_o', [zwalkparams], block0)
""")
