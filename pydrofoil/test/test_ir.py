from pydrofoil import parse
from pydrofoil.types import *
from pydrofoil.ir import *

class FakeCodeGen:
    builtin_names = {"zz5izDzKz5i64": "int_to_int64", "zz5i64zDzKz5i": "int64_to_int"}
    inlinable_functions = {}
    specialization_functions = {}

fakecodegen = FakeCodeGen()

def check_optimize(graph, expected):
    res = optimize(graph, fakecodegen)
    assert res
    res = print_graph_construction(graph)
    expected = expected.strip()
    got = "\n".join(res)
    if got != expected:
        print "EXPECTED:"
        print "_" * 60
        print expected
        print "GOT:"
        print "_" * 60
        print got
    assert got == expected


def make_bits_to_bool():
    zb = Argument('zb', SmallFixedBitVector(1))
    block0 = Block()
    block1 = Block()
    block2 = Block()
    block3 = Block()
    block4 = Block()
    block5 = Block()
    i1 = block0.emit(Cast, '$cast', [zb], GenericBitVector(), '`1 14:2-14:5', 'zz43')
    i2 = block0.emit(Cast, '$cast', [SmallBitVectorConstant('0b1', resolved_type=SmallFixedBitVector(1))], GenericBitVector(), '`1 14:2-14:5', 'zz44')
    i3 = block0.emit(Operation, 'zeq_bits', [i1, i2], Bool(), '`1 14:2-14:5', 'zz42')
    i4 = block0.emit(Operation, '@not', [i3], Bool(), '`1 13:27-16:1', None)
    block0.next = ConditionalGoto(i4, block4, block1, '`1 13:27-16:1')
    block1.next = Goto(block2, None)
    block2.next = Goto(block3, None)
    i5 = block3.emit_phi([block2, block5], [BooleanConstant.TRUE, BooleanConstant.FALSE], Bool())
    block3.next = Return(i5, None)
    block4.next = Goto(block5, None)
    block5.next = Goto(block3, None)
    return Graph('zbits1_to_bool', [zb], block0)

def test_swap_not():
    graph = make_bits_to_bool()

    swap_not(graph, fakecodegen)
    res = print_graph_construction(graph)
    assert "\n".join(res) == """\
zb = Argument('zb', SmallFixedBitVector(1))
block0 = Block()
block1 = Block()
block2 = Block()
block3 = Block()
block4 = Block()
block5 = Block()
i1 = block0.emit(Cast, '$cast', [zb], GenericBitVector(), '`1 14:2-14:5', 'zz43')
i2 = block0.emit(Cast, '$cast', [SmallBitVectorConstant('0b1', SmallFixedBitVector(1))], GenericBitVector(), '`1 14:2-14:5', 'zz44')
i3 = block0.emit(Operation, 'zeq_bits', [i1, i2], Bool(), '`1 14:2-14:5', 'zz42')
block0.next = ConditionalGoto(i3, block1, block4, '`1 13:27-16:1')
block1.next = Goto(block2, None)
block2.next = Goto(block3, None)
i4 = block3.emit_phi([block2, block5], [BooleanConstant.TRUE, BooleanConstant.FALSE], Bool())
block3.next = Return(i4, None)
block4.next = Goto(block5, None)
block5.next = Goto(block3, None)
graph = Graph('zbits1_to_bool', [zb], block0)"""

def test_remove_empty_blocks():
    graph = make_bits_to_bool()
    remove_empty_blocks(graph)
    res = print_graph_construction(graph)
    assert "\n".join(res) == """\
zb = Argument('zb', SmallFixedBitVector(1))
block0 = Block()
block1 = Block()
block2 = Block()
block3 = Block()
i1 = block0.emit(Cast, '$cast', [zb], GenericBitVector(), '`1 14:2-14:5', 'zz43')
i2 = block0.emit(Cast, '$cast', [SmallBitVectorConstant('0b1', SmallFixedBitVector(1))], GenericBitVector(), '`1 14:2-14:5', 'zz44')
i3 = block0.emit(Operation, 'zeq_bits', [i1, i2], Bool(), '`1 14:2-14:5', 'zz42')
i4 = block0.emit(Operation, '@not', [i3], Bool(), '`1 13:27-16:1', None)
block0.next = ConditionalGoto(i4, block1, block3, '`1 13:27-16:1')
block1.next = Goto(block2, None)
i5 = block2.emit_phi([block3, block1], [BooleanConstant.TRUE, BooleanConstant.FALSE], Bool())
block2.next = Return(i5, None)
block3.next = Goto(block2, None)
graph = Graph('zbits1_to_bool', [zb], block0)"""


def test_remove_empty_blocks_2():
    zx = Argument('zx', Bool())
    block0 = Block()
    block1 = Block()
    block2 = Block()
    block3 = Block()
    block0.next = ConditionalGoto(zx, block1, block3, '`1 204:26-204:48')
    block1.next = Goto(block2, None)
    i1 = block2.emit_phi([block3, block1], [SmallBitVectorConstant('0b0', resolved_type=SmallFixedBitVector(1)), SmallBitVectorConstant('0b1', resolved_type=SmallFixedBitVector(1))], SmallFixedBitVector(1))
    block2.next = Return(i1, None)
    block3.next = Goto(block2, None)
    graph = Graph('zbool_to_bits', [zx], block0)
    assert not remove_empty_blocks(graph)

def test_if_true_false():
    zargz3 = Argument('zargz3', SmallFixedBitVector(32))
    block1 = Block()
    block2 = Block()
    block3 = Block()
    block4 = Block()
    block1.next = ConditionalGoto(BooleanConstant.FALSE, block2, block3, '')
    block2.next = Goto(block4)
    block3.next = Goto(block4)
    v0 = block4.emit_phi([block2, block3], [MachineIntConstant(12), MachineIntConstant(13)], Int())
    v1 = block4.emit(Operation, 'foo', [MachineIntConstant(-12), v0], Int(), '', None)
    block4.next = Return(v0, '')

    g = Graph("execute", [zargz3], block1)
    res = remove_if_true_false(g)
    res = print_graph_construction(g)
    assert "\n".join(res) == """\
zargz3 = Argument('zargz3', SmallFixedBitVector(32))
block0 = Block()
block1 = Block()
block2 = Block()
block0.next = Goto(block1, None)
block1.next = Goto(block2, None)
i1 = block2.emit(Operation, 'foo', [MachineIntConstant(-12), MachineIntConstant(13)], Int(), '', None)
block2.next = Return(MachineIntConstant(13), '')
graph = Graph('execute', [zargz3], block0)"""

def test_cast():
    zb = Argument('zb', SmallFixedBitVector(1))
    block0 = Block()
    i1 = block0.emit(Cast, '$cast', [zb], GenericBitVector(), '`1 14:2-14:5', 'zz43')
    i2 = block0.emit(Cast, '$cast', [i1], SmallFixedBitVector(1), '`1 14:2-14:5', 'zz43')
    block0.next = Return(i2, '')
    graph = Graph('f', [zb], block0)
    check_optimize(graph, """\
zb = Argument('zb', SmallFixedBitVector(1))
block0 = Block()
block0.next = Return(zb, '')
graph = Graph('f', [zb], block0)""")

def test_eq_bits():
    za = Argument('za', SmallFixedBitVector(2))
    block0 = Block()
    i1 = block0.emit(Cast, '$cast', [za], GenericBitVector(), '`5 120:4-120:8', 'zz411')
    i2 = block0.emit(Cast, '$cast', [SmallBitVectorConstant(0b01, SmallFixedBitVector(2))], GenericBitVector(), '`5 120:4-120:8', 'zz412')
    i3 = block0.emit(Operation, 'eq_bits', [i1, i2], Bool(), '`5 120:4-120:8', 'zz410')
    block0.next = Return(i3, None)
    graph = Graph("f", [za], block0)
    check_optimize(graph, """\
za = Argument('za', SmallFixedBitVector(2))
block0 = Block()
i1 = block0.emit(Operation, '@eq_bits_bv_bv', [za, SmallBitVectorConstant(1, SmallFixedBitVector(2))], Bool(), '`5 120:4-120:8', 'zz410')
block0.next = Return(i1, None)
graph = Graph('f', [za], block0)""")

def test_neq_bits():
    za = Argument('za', SmallFixedBitVector(2))
    block0 = Block()
    i1 = block0.emit(Cast, '$cast', [za], GenericBitVector(), '`5 120:4-120:8', 'zz411')
    i2 = block0.emit(Cast, '$cast', [SmallBitVectorConstant(0b01, SmallFixedBitVector(2))], GenericBitVector(), '`5 120:4-120:8', 'zz412')
    i3 = block0.emit(Operation, 'neq_bits', [i1, i2], Bool(), '`5 120:4-120:8', 'zz410')
    block0.next = Return(i3, None)
    graph = Graph("f", [za], block0)
    check_optimize(graph, """\
za = Argument('za', SmallFixedBitVector(2))
block0 = Block()
i1 = block0.emit(Operation, '@eq_bits_bv_bv', [za, SmallBitVectorConstant(1, SmallFixedBitVector(2))], Bool(), '`5 120:4-120:8', 'zz410')
i2 = block0.emit(Operation, '@not', [i1], Bool(), None, None)
block0.next = Return(i2, None)
graph = Graph('f', [za], block0)""")

def test_int_and_back():
    block0 = Block()
    i1 = block0.emit(Operation, 'int64_to_int', [MachineIntConstant(15)], Int(), '`5 295:30-295:32', 'zz42')
    i2 = block0.emit(Operation, 'int_to_int64', [i1], MachineInt(), '`5 295:30-295:32', 'zz40')
    block0.next = Return(i2)
    graph = Graph("f", [], block0)
    check_optimize(graph, """\
block0 = Block()
block0.next = Return(MachineIntConstant(15), None)
graph = Graph('f', [], block0)""")

def test_eq_int():
    zr = Argument('zr', MachineInt())
    block0 = Block()
    i1 = block0.emit(Operation, 'int64_to_int', [MachineIntConstant(0)], Int(), '`80', 'zz4128')
    i2 = block0.emit(Operation, 'int64_to_int', [zr], Int(), '`82', 'zz4130')
    i3 = block0.emit(Operation, 'eq_int', [i2, i1], Bool(), '`83', 'zz4129')
    block0.next = Return(i3)
    graph = Graph("f", [zr], block0)
    check_optimize(graph, """\
zr = Argument('zr', MachineInt())
block0 = Block()
i1 = block0.emit(Operation, '@eq', [zr, MachineIntConstant(0)], Bool(), '`83', 'zz4129')
block0.next = Return(i1, None)
graph = Graph('f', [zr], block0)""")

def test_vector_subrange():
    zargz3 = Argument('zargz3', SmallFixedBitVector(64))
    block0 = Block()
    i1 = block0.emit(Operation, 'int64_to_int', [MachineIntConstant(6)], Int(), '`36 84:17-84:31', 'zz412137')
    i2 = block0.emit(Operation, 'int64_to_int', [MachineIntConstant(0)], Int(), '`36 84:17-84:31', 'zz412138')
    i3 = block0.emit(Cast, '$cast', [zargz3], GenericBitVector(), '`36 84:17-84:31', 'zz412139')
    i4 = block0.emit(Operation, 'vector_subrange', [i3, i1, i2], GenericBitVector(), '`36 84:17-84:31', 'zz412140')
    i5 = block0.emit(Cast, '$cast', [i4], SmallFixedBitVector(7), '`36 84:17-84:31', 'zz412111')
    block0.next = Return(i5)
    graph = Graph("f", [zargz3], block0)
    check_optimize(graph, """\
zargz3 = Argument('zargz3', SmallFixedBitVector(64))
block0 = Block()
i1 = block0.emit(Operation, '@vector_subrange_fixed_bv_i_i', [zargz3, MachineIntConstant(6), MachineIntConstant(0)], SmallFixedBitVector(7), '`36 84:17-84:31', 'zz412140')
block0.next = Return(i1, None)
graph = Graph('f', [zargz3], block0)""")

def test_vector_update_subrange():
    zv = Argument('zv', SmallFixedBitVector(64))
    zx = Argument('zx', SmallFixedBitVector(1))
    block0 = Block()
    i3 = block0.emit(Cast, '$cast', [zv], GenericBitVector(), '`509', 'zz45')
    i4 = block0.emit(Cast, '$cast', [zx], GenericBitVector(), '`511', 'zz46')
    i5 = block0.emit(Operation, '@vector_update_subrange_o_i_i_o', [i3, MachineIntConstant(0), MachineIntConstant(0), i4], GenericBitVector(), '`513', 'zz47')
    i6 = block0.emit(Cast, '$cast', [i5], SmallFixedBitVector(64), '`514', 'zz40')
    block0.next = Return(i6, None)
    graph = Graph('update', [zv, zx], block0)
    check_optimize(graph, """\
zv = Argument('zv', SmallFixedBitVector(64))
zx = Argument('zx', SmallFixedBitVector(1))
block0 = Block()
i2 = block0.emit(Operation, '@vector_update_subrange_fixed_bv_i_i_bv', [zv, MachineIntConstant(0), MachineIntConstant(0), zx], SmallFixedBitVector(64), '`513', 'zz47')
block0.next = Return(i2, None)
graph = Graph('update', [zv, zx], block0)""")

def test_vector_access():
    zx = Argument('zx', SmallFixedBitVector(8))
    block0 = Block()
    i1 = block0.emit(Cast, '$cast', [zx], GenericBitVector(), '`35 86:29-86:33', 'zz48')
    i2 = block0.emit(Operation, '@vector_access_o_i', [i1, MachineIntConstant(7)], Bit(), '`35 86:29-86:33', 'zz46')
    block0.next = Return(i2)
    graph = Graph('update', [zx], block0)
    check_optimize(graph, """\
zx = Argument('zx', SmallFixedBitVector(8))
block0 = Block()
i1 = block0.emit(Operation, '@vector_access_bv_i', [zx, MachineIntConstant(7)], SmallFixedBitVector(1), '`35 86:29-86:33', 'zz46')
block0.next = Return(i1, None)
graph = Graph('update', [zx], block0)""")

def test_and_not_bits():
    zx = Argument('zx', SmallFixedBitVector(64))
    zy = Argument('zy', SmallFixedBitVector(64))
    block0 = Block()
    i1 = block0.emit(Cast, '$cast', [zx], GenericBitVector(), '`25 286:37-286:63', 'zz420')
    i2 = block0.emit(Operation, 'not_bits', [i1], GenericBitVector(), '`25 286:51-286:62', 'zz424')
    i3 = block0.emit(Cast, '$cast', [zy], GenericBitVector(), '`25 286:37-286:63', 'zz420')
    i4 = block0.emit(Operation, 'and_bits', [i3, i2], GenericBitVector(), '`25 286:37-286:63', 'zz422')
    i8 = block0.emit(Cast, '$cast', [i4], SmallFixedBitVector(64), '`25 286:37-286:63', 'zz420')
    block0.next = Return(i8)
    graph = Graph('update', [zx, zy], block0)
    check_optimize(graph, """\
zx = Argument('zx', SmallFixedBitVector(64))
zy = Argument('zy', SmallFixedBitVector(64))
block0 = Block()
i2 = block0.emit(Operation, '@not_vec_bv', [zx, MachineIntConstant(64)], SmallFixedBitVector(64), '`25 286:51-286:62', None)
i3 = block0.emit(Operation, '@and_vec_bv_bv', [zy, i2], SmallFixedBitVector(64), '`25 286:37-286:63', 'zz422')
block0.next = Return(i3, None)
graph = Graph('update', [zx, zy], block0)""")

def test_add_bits():
    zx = Argument('zx', SmallFixedBitVector(64))
    zy = Argument('zy', SmallFixedBitVector(64))
    block0 = Block()
    i1 = block0.emit(Cast, '$cast', [zx], GenericBitVector(), '`25 286:37-286:63', 'zz420')
    i3 = block0.emit(Cast, '$cast', [zy], GenericBitVector(), '`25 286:37-286:63', 'zz420')
    i4 = block0.emit(Operation, 'add_bits', [i1, i3], GenericBitVector(), '`25 286:37-286:63', 'zz422')
    i8 = block0.emit(Cast, '$cast', [i4], SmallFixedBitVector(64), '`25 286:37-286:63', 'zz420')
    block0.next = Return(i8)
    graph = Graph('update', [zx, zy], block0)
    check_optimize(graph, """\
zx = Argument('zx', SmallFixedBitVector(64))
zy = Argument('zy', SmallFixedBitVector(64))
block0 = Block()
i2 = block0.emit(Operation, '@add_bits_bv_bv', [zx, zy, MachineIntConstant(64)], SmallFixedBitVector(64), '`25 286:37-286:63', 'zz422')
block0.next = Return(i2, None)
graph = Graph('update', [zx, zy], block0)""")

def test_append():
    zcreg = Argument('zcreg', SmallFixedBitVector(3))
    block0 = Block()
    i1 = block0.emit(Cast, '$cast', [SmallBitVectorConstant(0b01, SmallFixedBitVector(2))], GenericBitVector(), '`5 100:30-100:41', 'zz40')
    i2 = block0.emit(Cast, '$cast', [zcreg], GenericBitVector(), '`5 100:30-100:41', 'zz41')
    i3 = block0.emit(Operation, 'append', [i1, i2], GenericBitVector(), '`5 100:30-100:41', 'zz42')
    i4 = block0.emit(Cast, '$cast', [i3], SmallFixedBitVector(5), '`5 100:30-100:41', 'return')
    block0.next = Return(i4, None)
    graph = Graph('zcreg2reg_idx', [zcreg], block0)
    check_optimize(graph, """\
zcreg = Argument('zcreg', SmallFixedBitVector(3))
block0 = Block()
i1 = block0.emit(Operation, '@bitvector_concat_bv_bv', [SmallBitVectorConstant(1, SmallFixedBitVector(2)), MachineIntConstant(3), zcreg], SmallFixedBitVector(5), '`5 100:30-100:41', 'zz42')
block0.next = Return(i1, None)
graph = Graph('zcreg2reg_idx', [zcreg], block0)""")

def test_shiftr():
    for kind in "@shiftr_o_i", "@arith_shiftr_o_i":
        arg = Argument('arg', SmallFixedBitVector(64))
        block0 = Block()
        i1 = block0.emit(Operation, '@vector_subrange_fixed_bv_i_i', [arg, MachineIntConstant(47), MachineIntConstant(0)], SmallFixedBitVector(48), '`3484', 'zz44')
        i2 = block0.emit(Operation, '@zero_extend_bv_i_i', [i1, MachineIntConstant(48), MachineIntConstant(64)], SmallFixedBitVector(64), '`26 426:31-426:66', 'zz449')
        i2 = block0.emit(Cast, '$cast', [i2], GenericBitVector(), None, None)
        i3 = block0.emit(Operation, kind, [i2, MachineIntConstant(1)], GenericBitVector(), '`26 426:31-426:71', 'zz445')
        i4 = block0.emit(Cast, '$cast', [i3], SmallFixedBitVector(64), '`26 426:31-426:71', 'zhtif_exit_code')
        block0.next = Return(i4, None)
        graph = Graph('zcreg2reg_idx', [arg], block0)
        check_optimize(graph, """\
arg = Argument('arg', SmallFixedBitVector(64))
block0 = Block()
i1 = block0.emit(Operation, '@vector_subrange_fixed_bv_i_i', [arg, MachineIntConstant(47), MachineIntConstant(0)], SmallFixedBitVector(48), '`3484', 'zz44')
i2 = block0.emit(Operation, '@zero_extend_bv_i_i', [i1, MachineIntConstant(48), MachineIntConstant(64)], SmallFixedBitVector(64), '`26 426:31-426:66', 'zz449')
i3 = block0.emit(Operation, '%s_bv_i', [i2, MachineIntConstant(64), MachineIntConstant(1)], SmallFixedBitVector(64), '`26 426:31-426:71', 'zz445')
block0.next = Return(i3, None)
graph = Graph('zcreg2reg_idx', [arg], block0)""" % (kind[:-4], ))

def test_int_cmp():
    a1 = Argument('i', SmallFixedBitVector(52))
    a2 = Argument('i', SmallFixedBitVector(52))
    block0 = Block()
    i1 = block0.emit(Operation, '@unsigned_bv', [a1, MachineIntConstant(52)], MachineInt(), '`41 263:11-263:24', 'zz429')
    i2 = block0.emit(Operation, '@unsigned_bv', [a2, MachineIntConstant(52)], MachineInt(), '`41 263:29-263:42', 'zz427')
    i3 = block0.emit(Operation, 'zz5i64zDzKz5i', [i1], Int(), '`41 263:11-263:42', 'zz424')
    i4 = block0.emit(Operation, 'zz5i64zDzKz5i', [i2], Int(), '`41 263:11-263:42', 'zz425')
    i5 = block0.emit(Operation, 'lt', [i3, i4], Bool(), '`41 263:11-263:42', 'zz412')
    block0.next = Return(i5, None)
    graph = Graph('f', [a1, a2], block0)
    check_optimize(graph, """\
i = Argument('i', SmallFixedBitVector(52))
i = Argument('i', SmallFixedBitVector(52))
block0 = Block()
i2 = block0.emit(Operation, '@unsigned_bv', [i, MachineIntConstant(52)], MachineInt(), '`41 263:11-263:24', 'zz429')
i3 = block0.emit(Operation, '@unsigned_bv', [i, MachineIntConstant(52)], MachineInt(), '`41 263:29-263:42', 'zz427')
i4 = block0.emit(Operation, '@lt', [i2, i3], Bool(), '`41 263:11-263:42', 'zz412')
block0.next = Return(i4, None)
graph = Graph('f', [i, i], block0)""")


def test_set_slice():
    zval_name = Argument('zval_name', SmallFixedBitVector(64))
    block0 = Block()
    i1 = block0.emit(Cast, '$cast', [zval_name], GenericBitVector(), '`7 47:10-47:38', 'zz419')
    i2 = block0.emit(Cast, '$cast', [SmallBitVectorConstant(0b00000, SmallFixedBitVector(5))], GenericBitVector(), '`7 47:10-47:38', 'zz420')
    i3 = block0.emit(Operation, '@set_slice_i_i_o_i_o', [MachineIntConstant(64), MachineIntConstant(5), i1, MachineIntConstant(3), i2], GenericBitVector(), '`7 47:10-47:38', 'zz421')
    i4 = block0.emit(Cast, '$cast', [SmallBitVectorConstant(0b0, SmallFixedBitVector(1))], GenericBitVector(), '`7 48:10-48:35', 'zz413')
    i5 = block0.emit(Operation, '@set_slice_i_i_o_i_o', [MachineIntConstant(64), MachineIntConstant(1), i3, MachineIntConstant(14), i4], GenericBitVector(), '`7 48:10-48:35', 'zz414')
    i6 = block0.emit(Cast, '$cast', [SmallBitVectorConstant(0b0000000000000000000000000000000000000, SmallFixedBitVector(37))], GenericBitVector(), '`7 49:10-49:72', 'zz46')
    i7 = block0.emit(Operation, '@set_slice_i_i_o_i_o', [MachineIntConstant(64), MachineIntConstant(37), i5, MachineIntConstant(27), i6], GenericBitVector(), '`7 49:10-49:72', 'zz47')
    i8 = block0.emit(Cast, '$cast', [i7], SmallFixedBitVector(64), '`7 49:10-49:72', 'zz40')
    block0.next = Return(i8, None)
    graph = Graph('z__get_FPCR', [zval_name], block0)
    check_optimize(graph, """\
zval_name = Argument('zval_name', SmallFixedBitVector(64))
block0 = Block()
i1 = block0.emit(Operation, '@vector_update_subrange_fixed_bv_i_i_bv', [zval_name, MachineIntConstant(7), MachineIntConstant(3), SmallBitVectorConstant(0, SmallFixedBitVector(5))], SmallFixedBitVector(64), '`7 47:10-47:38', 'zz421')
i2 = block0.emit(Operation, '@vector_update_subrange_fixed_bv_i_i_bv', [i1, MachineIntConstant(14), MachineIntConstant(14), SmallBitVectorConstant(0, SmallFixedBitVector(1))], SmallFixedBitVector(64), '`7 48:10-48:35', 'zz414')
i3 = block0.emit(Operation, '@vector_update_subrange_fixed_bv_i_i_bv', [i2, MachineIntConstant(63), MachineIntConstant(27), SmallBitVectorConstant(0, SmallFixedBitVector(37))], SmallFixedBitVector(64), '`7 49:10-49:72', 'zz47')
block0.next = Return(i3, None)
graph = Graph('z__get_FPCR', [zval_name], block0)""")

def test_zero_extend_unwrapped_res():
    value = Argument('value', GenericBitVector())
    block0 = Block()
    i0 = block0.emit(Operation, '@zero_extend_o_i', [value, MachineIntConstant(64)], GenericBitVector(), '`5 234:29-234:46', 'return')
    i1 = block0.emit(Cast, '$cast', [i0], SmallFixedBitVector(64), '`7 3419:16-3419:38', 'zz42')
    block0.next = Return(i1, None)
    graph = Graph('f', [value], block0)
    check_optimize(graph, """\
value = Argument('value', GenericBitVector())
block0 = Block()
i1 = block0.emit(Operation, '@zero_extend_o_i_unwrapped_res', [value, MachineIntConstant(64)], SmallFixedBitVector(64), '`5 234:29-234:46', 'return')
block0.next = Return(i1, None)
graph = Graph('f', [value], block0)""")

def test_sign_extend_unwrapped_res():
    value = Argument('value', GenericBitVector())
    block0 = Block()
    i0 = block0.emit(Operation, '@sign_extend_o_i', [value, MachineIntConstant(64)], GenericBitVector(), '`5 234:29-234:46', 'return')
    i1 = block0.emit(Cast, '$cast', [i0], SmallFixedBitVector(64), '`7 3419:16-3419:38', 'zz42')
    block0.next = Return(i1, None)
    graph = Graph('f', [value], block0)
    check_optimize(graph, """\
value = Argument('value', GenericBitVector())
block0 = Block()
i1 = block0.emit(Operation, '@sign_extend_o_i_unwrapped_res', [value, MachineIntConstant(64)], SmallFixedBitVector(64), '`5 234:29-234:46', 'return')
block0.next = Return(i1, None)
graph = Graph('f', [value], block0)""")

def test_vector_update_list():
    index = Argument('index', MachineInt())
    block0 = Block()
    i6 = block0.emit(GlobalRead, 'z_R', [], FVec(31, SmallFixedBitVector(64)), None, None)
    i7 = block0.emit(Cast, '$cast', [i6], Vec(SmallFixedBitVector(64)), '`7 1087:12-1087:17', 'zz416')
    i8 = block0.emit(Operation, '@vector_update_o_i_o', [i7, index, SmallBitVectorConstant(0b01, SmallFixedBitVector(2))], Vec(SmallFixedBitVector(64)), '`7 1087:12-1087:17', 'zz418')
    i9 = block0.emit(Cast, '$cast', [i8], FVec(31, SmallFixedBitVector(64)), '`7 1087:12-1087:17', 'z_R')
    block0.emit(GlobalWrite, 'z_R', [i9], FVec(31, SmallFixedBitVector(64)), None, None)
    block0.next = Return(None, None)
    graph = Graph('f', [index], block0)
    check_optimize(graph, """\
index = Argument('index', MachineInt())
block0 = Block()
i1 = block0.emit(GlobalRead, 'z_R', [], FVec(31, SmallFixedBitVector(64)), None, None)
i2 = block0.emit(Cast, '$cast', [i1], Vec(SmallFixedBitVector(64)), '`7 1087:12-1087:17', 'zz416')
i3 = block0.emit(Operation, '@helper_vector_update_inplace_o_i_o', [i2, index, SmallBitVectorConstant(1, SmallFixedBitVector(2))], Unit(), '`7 1087:12-1087:17', 'zz418')
block0.next = Return(None, None)
graph = Graph('f', [index], block0)""")

def test_fill_fresh_vector():
    block0 = Block()
    i1 = block0.emit(VectorInit, '$zinternal_vector_init', [MachineIntConstant(3)], Vec(MachineInt()), '`41 765:95-765:126', None)
    i2 = block0.emit(VectorUpdate, '$zinternal_vector_update', [i1, MachineIntConstant(0), MachineIntConstant(5)], Vec(MachineInt()), None, None)
    i3 = block0.emit(VectorUpdate, '$zinternal_vector_update', [i2, MachineIntConstant(1), MachineIntConstant(7)], Vec(MachineInt()), None, None)
    i4 = block0.emit(VectorUpdate, '$zinternal_vector_update', [i3, MachineIntConstant(2), MachineIntConstant(9)], Vec(MachineInt()), None, None)
    i5 = block0.emit(Operation, 'zvalidDoubleRegs', [IntConstant(3), i4], Bool(), '`41 765:95-765:126', 'zz46820')
    block0.next = Return(i5, None)
    graph = Graph('f', [], block0)
    check_optimize(graph, """\
block0 = Block()
i0 = block0.emit(VectorInit, '$zinternal_vector_init', [MachineIntConstant(3)], Vec(MachineInt()), '`41 765:95-765:126', None)
i1 = block0.emit(Operation, '@helper_vector_update_inplace_o_i_o', [i0, MachineIntConstant(0), MachineIntConstant(5)], Unit(), None, None)
i2 = block0.emit(Operation, '@helper_vector_update_inplace_o_i_o', [i0, MachineIntConstant(1), MachineIntConstant(7)], Unit(), None, None)
i3 = block0.emit(Operation, '@helper_vector_update_inplace_o_i_o', [i0, MachineIntConstant(2), MachineIntConstant(9)], Unit(), None, None)
i4 = block0.emit(Operation, 'zvalidDoubleRegs', [IntConstant(3), i0], Bool(), '`41 765:95-765:126', 'zz46820')
block0.next = Return(i4, None)
graph = Graph('f', [], block0)""")

def test_mult_1():
    index = Argument('index', Int())
    block0 = Block()
    i1 = block0.emit(Operation, 'mult_int', [index, IntConstant(1)], Int(), '`7 14894:55-14894:60', 'zz422')
    block0.next = Return(i1, None)
    graph = Graph('f', [index], block0)
    check_optimize(graph, """\
index = Argument('index', Int())
block0 = Block()
block0.next = Return(index, None)
graph = Graph('f', [index], block0)""")

def test_mult_to_shift():
    index = Argument('index', Int())
    block0 = Block()
    i1 = block0.emit(Operation, 'mult_int', [IntConstant(8), index], Int(), '`7 14894:55-14894:60', 'zz422')
    block0.next = Return(i1, None)
    graph = Graph('f', [index], block0)
    check_optimize(graph, """\
index = Argument('index', Int())
block0 = Block()
i1 = block0.emit(Operation, '@shl_int_o_i', [index, MachineIntConstant(3)], Int(), '`7 14894:55-14894:60', 'zz422')
block0.next = Return(i1, None)
graph = Graph('f', [index], block0)""")

def test_mult_constfold():
    index = Argument('index', Int())
    block0 = Block()
    i1 = block0.emit(Operation, 'mult_int', [IntConstant(12), IntConstant(2)], Int(), '`7 14894:55-14894:60', 'zz422')
    i2 = block0.emit(Operation, 'mult_int', [i1, IntConstant(16)], Int(), '`7 14894:55-14894:60', 'zz422')
    block0.next = Return(i2, None)
    graph = Graph('f', [index], block0)
    check_optimize(graph, """\
index = Argument('index', Int())
block0 = Block()
block0.next = Return(IntConstant(384), None)
graph = Graph('f', [index], block0)""")

def test_neg_constfold():
    index = Argument('index', Int())
    block0 = Block()
    i1 = block0.emit(Operation, 'neg_int', [IntConstant(12)], Int(), '`7 14894:55-14894:60', 'zz422')
    block0.next = Return(i1, None)
    graph = Graph('f', [index], block0)
    check_optimize(graph, """\
index = Argument('index', Int())
block0 = Block()
block0.next = Return(IntConstant(-12), None)
graph = Graph('f', [index], block0)""")

def test_ediv_constfold():
    block0 = Block()
    i1 = block0.emit(Operation, 'ediv_int', [IntConstant(128), IntConstant(2)], Int(), '`7 11526:20-11526:32', 'zz4179')
    block0.next = Return(i1, None)
    graph = Graph('f', [], block0)
    check_optimize(graph, """\
block0 = Block()
block0.next = Return(IntConstant(64), None)
graph = Graph('f', [], block0)""")

def test_pow_i():
    block0 = Block()
    i1 = block0.emit(Operation, '@pow2_i', [MachineIntConstant(32)], Int(), '`7 150231:75-150231:81', 'zz492')
    block0.next = Return(i1, None)
    graph = Graph('f', [], block0)
    check_optimize(graph, """\
block0 = Block()
block0.next = Return(IntConstant(4294967296), None)
graph = Graph('f', [], block0)""")

def test_optimize_loop_phi():
    zxs = Argument('zxs', SmallFixedBitVector(8))
    block0 = Block()
    block1 = Block()
    block2 = Block()
    block3 = Block()
    block0.next = Goto(block1, None)
    i1 = block1.emit_phi([block0, block3], [zxs, None], SmallFixedBitVector(8))
    i1.prevvalues[1] = i1
    i2 = block1.emit_phi([block0, block3], [SmallBitVectorConstant(0x00, SmallFixedBitVector(8)), None], SmallFixedBitVector(8))
    i4 = block1.emit_phi([block0, block3], [MachineIntConstant(7), None], MachineInt())
    i4.prevvalues[1] = i4
    i5 = block1.emit_phi([block0, block3], [MachineIntConstant(1), None], MachineInt())
    i5.prevvalues[1] = i5
    i6 = block1.emit_phi([block0, block3], [MachineIntConstant(0), None], MachineInt())
    i8 = block1.emit(Operation, '@gt', [i6, i4], Bool(), '`1 279:2-280:19', None)
    block1.next = ConditionalGoto(i8, block2, block3, '`1 279:2-280:19')
    block2.next = Return(i2, None)
    i9 = block3.emit(Operation, '@sub_i_i_wrapped_res', [MachineIntConstant(7), i6], Int(), '`1 280:15-280:18', 'zz416')
    i10 = block3.emit(Operation, 'zz5izDzKz5i64', [i9], MachineInt(), None, None)
    i11 = block3.emit(Operation, '@vector_access_bv_i', [i1, i10], Bit(), '`1 280:12-280:19', 'zz47')
    i12 = block3.emit(Cast, '$cast', [i2], GenericBitVector(), '`1 280:4-280:9', 'zz48')
    i13 = block3.emit(Operation, '@vector_update_o_i_o', [i12, i6, i11], GenericBitVector(), '`1 280:4-280:9', 'zz410')
    i3 = block3.emit(Cast, '$cast', [i13], SmallFixedBitVector(8), '`1 280:4-280:9', 'zz40')
    i2.prevvalues[1] = i3
    i7 = block3.emit(Operation, '@iadd', [i6, i5], MachineInt(), '`1 279:2-280:19', 'zz45')
    i6.prevvalues[1] = i7
    block3.next = Goto(block1, None)
    graph = Graph('zreverse_bits_in_byte', [zxs], block0, True)
    check_optimize(graph, """\
zxs = Argument('zxs', SmallFixedBitVector(8))
block0 = Block()
block1 = Block()
block2 = Block()
block3 = Block()
block0.next = Goto(block1, None)
i1 = block1.emit_phi([block0, block3], [SmallBitVectorConstant(0, SmallFixedBitVector(8)), None], SmallFixedBitVector(8))
i2 = block1.emit_phi([block0, block3], [MachineIntConstant(0), None], MachineInt())
i3 = block1.emit(Operation, '@gt', [i2, MachineIntConstant(7)], Bool(), '`1 279:2-280:19', None)
block1.next = ConditionalGoto(i3, block2, block3, '`1 279:2-280:19')
block2.next = Return(i1, None)
i4 = block3.emit(Operation, '@sub_i_i_must_fit', [MachineIntConstant(7), i2], MachineInt(), '`1 280:15-280:18', 'zz416')
i5 = block3.emit(Operation, '@vector_access_bv_i', [zxs, i4], SmallFixedBitVector(1), '`1 280:12-280:19', 'zz47')
i6 = block3.emit(Operation, '$zupdate_fbits', [i1, i2, i5], SmallFixedBitVector(8), '`1 280:4-280:9', 'zz410')
i1.prevvalues[1] = i6
i7 = block3.emit(Operation, '@iadd', [i2, MachineIntConstant(1)], MachineInt(), '`1 279:2-280:19', 'zz45')
i2.prevvalues[1] = i7
block3.next = Goto(block1, None)
graph = Graph('zreverse_bits_in_byte', [zxs], block0, True)
""")


def test_complicated_inlining():
    codegen = FakeCodeGen()
    zlen = Argument('zlen', Int())
    zv = Argument('zv', GenericBitVector())
    block0 = Block()
    block1 = Block()
    block2 = Block()
    block3 = Block()
    i2 = block0.emit(Operation, '@length_unwrapped_res', [zv], MachineInt(), '`2 141:39-141:48', 'zz41')
    i3 = block0.emit(Operation, 'zz5i64zDzKz5i', [i2], Int(), '`2 141:39-141:48', None)
    i4 = block0.emit(Operation, 'zlteq_int', [zlen, i3], Bool(), '`2 141:32-141:48', 'zz40')
    block0.next = ConditionalGoto(i4, block1, block3, '`2 141:29-141:100')
    i5 = block1.emit(Operation, 'zz5izDzKz5i64', [zlen], MachineInt(), None, None)
    i6 = block1.emit(Operation, '@sail_truncate_o_i', [zv, i5], GenericBitVector(), '`2 141:54-141:70', 'return')
    block1.next = Goto(block2, None)
    i7 = block2.emit_phi([block3, block1], [None, i6], GenericBitVector())
    block2.next = Return(i7, None)
    i8 = block3.emit(Operation, 'zz5izDzKz5i64', [zlen], MachineInt(), None, None)
    i9 = block3.emit(Operation, '@zero_extend_o_i', [zv, i8], GenericBitVector(), '`2 141:76-141:100', 'return')
    i7.prevvalues[0] = i9
    block3.next = Goto(block2, None)
    graph1 = Graph('zsail_mask', [zlen, zv], block0)
    
    zn = Argument('zn', Int())
    zi = Argument('zi', Int())
    zl = Argument('zl', Int())
    block0 = Block()
    block1 = Block()
    block2 = Block()
    block3 = Block()
    i3 = block0.emit(Operation, 'zgteq_int', [zl, zn], Bool(), '`2 336:5-336:11', 'zz40')
    block0.next = ConditionalGoto(i3, block1, block3, '`2 336:2-341:3')
    i4 = block1.emit(Comment, 'inlined zsail_ones', [], Unit(), None, None)
    i5 = block1.emit(Operation, 'zz5izDzKz5i64', [zn], MachineInt(), None, None)
    i6 = block1.emit(Operation, '@zeros_i', [i5], GenericBitVector(), '`2 320:32-320:45', 'zz40')
    i7 = block1.emit(Operation, 'znot_vec', [i6], GenericBitVector(), '`2 320:24-320:46', 'return')
    i8 = block1.emit(Operation, 'zz5izDzKz5i64', [zi], MachineInt(), None, None)
    i9 = block1.emit(Operation, '@shiftl_o_i', [i7, i8], GenericBitVector(), '`2 337:4-337:35', 'return')
    block1.next = Goto(block2, None)
    i10 = block2.emit_phi([block3, block1], [None, i9], GenericBitVector())
    block2.next = Return(i10, None)
    i11 = block3.emit(Cast, '$cast', [SmallBitVectorConstant(0b1, SmallFixedBitVector(1))], GenericBitVector(), '`2 339:25-339:57', 'zz46')
    i12 = block3.emit(Operation, 'zsail_mask', [zn, i11], GenericBitVector(), '`2 339:25-339:57', 'zz42')
    i13 = block3.emit(Operation, 'zz5izDzKz5i64', [zl], MachineInt(), None, None)
    i14 = block3.emit(Operation, '@shiftl_o_i', [i12, i13], GenericBitVector(), '`2 340:28-340:50', 'zz44')
    i15 = block3.emit(Operation, 'zsub_bits', [i14, i12], GenericBitVector(), '`2 340:19-340:56', 'zz43')
    i16 = block3.emit(Operation, 'zz5izDzKz5i64', [zi], MachineInt(), None, None)
    i17 = block3.emit(Operation, '@shiftl_o_i', [i15, i16], GenericBitVector(), '`2 340:4-340:60', 'return')
    i10.prevvalues[0] = i17
    block3.next = Goto(block2, None)
    graph = Graph('zslice_mask', [zn, zi, zl], block0)
    codegen.inlinable_functions['zsail_mask'] = graph1
    inline(graph, codegen)
    res = print_graph_construction(graph)
    got = "\n".join(res)
    assert got == '''\
zn = Argument('zn', Int())
zi = Argument('zi', Int())
zl = Argument('zl', Int())
block0 = Block()
block1 = Block()
block2 = Block()
block3 = Block()
block4 = Block()
block5 = Block()
block6 = Block()
i3 = block0.emit(Operation, 'zgteq_int', [zl, zn], Bool(), '`2 336:5-336:11', 'zz40')
block0.next = ConditionalGoto(i3, block1, block3, '`2 336:2-341:3')
i4 = block1.emit(Comment, 'inlined zsail_ones', [], Unit(), None, None)
i5 = block1.emit(Operation, 'zz5izDzKz5i64', [zn], MachineInt(), None, None)
i6 = block1.emit(Operation, '@zeros_i', [i5], GenericBitVector(), '`2 320:32-320:45', 'zz40')
i7 = block1.emit(Operation, 'znot_vec', [i6], GenericBitVector(), '`2 320:24-320:46', 'return')
i8 = block1.emit(Operation, 'zz5izDzKz5i64', [zi], MachineInt(), None, None)
i9 = block1.emit(Operation, '@shiftl_o_i', [i7, i8], GenericBitVector(), '`2 337:4-337:35', 'return')
block1.next = Goto(block2, None)
i10 = block2.emit_phi([block5, block1], [None, i9], GenericBitVector())
block2.next = Return(i10, None)
i11 = block3.emit(Cast, '$cast', [SmallBitVectorConstant(1, SmallFixedBitVector(1))], GenericBitVector(), '`2 339:25-339:57', 'zz46')
i12 = block3.emit(Comment, 'inlined zsail_mask', [], Unit(), None, None)
i13 = block3.emit(Operation, '@length_unwrapped_res', [i11], MachineInt(), '`2 141:39-141:48', 'zz41')
i14 = block3.emit(Operation, 'zz5i64zDzKz5i', [i13], Int(), '`2 141:39-141:48', None)
i15 = block3.emit(Operation, 'zlteq_int', [zn, i14], Bool(), '`2 141:32-141:48', 'zz40')
block3.next = ConditionalGoto(i15, block4, block6, '`2 141:29-141:100')
i16 = block4.emit(Operation, 'zz5izDzKz5i64', [zn], MachineInt(), None, None)
i17 = block4.emit(Operation, '@sail_truncate_o_i', [i11, i16], GenericBitVector(), '`2 141:54-141:70', 'return')
block4.next = Goto(block5, None)
i18 = block5.emit_phi([block6, block4], [None, i17], GenericBitVector())
i19 = block5.emit(Operation, 'zz5izDzKz5i64', [zl], MachineInt(), None, None)
i20 = block5.emit(Operation, '@shiftl_o_i', [i18, i19], GenericBitVector(), '`2 340:28-340:50', 'zz44')
i21 = block5.emit(Operation, 'zsub_bits', [i20, i18], GenericBitVector(), '`2 340:19-340:56', 'zz43')
i22 = block5.emit(Operation, 'zz5izDzKz5i64', [zi], MachineInt(), None, None)
i23 = block5.emit(Operation, '@shiftl_o_i', [i21, i22], GenericBitVector(), '`2 340:4-340:60', 'return')
i10.prevvalues[0] = i23
block5.next = Goto(block2, None)
i24 = block6.emit(Operation, 'zz5izDzKz5i64', [zn], MachineInt(), None, None)
i25 = block6.emit(Operation, '@zero_extend_o_i', [i11, i24], GenericBitVector(), '`2 141:76-141:100', 'return')
i18.prevvalues[0] = i25
block6.next = Goto(block5, None)
graph = Graph('zslice_mask', [zn, zi, zl], block0)'''


def test_toposort():
    zp = Argument('zp', SmallFixedBitVector(2))
    block0 = Block()
    block1 = Block()
    block2 = Block()
    block3 = Block()
    block4 = Block()
    block5 = Block()
    block6 = Block()
    block7 = Block()
    i1 = block0.emit(Operation, '@eq_bits_bv_bv', [zp, SmallBitVectorConstant(0b00, SmallFixedBitVector(2))], Bool(), '`5 170:4-170:8', 'zz414')
    block0.next = ConditionalGoto(i1, block1, block3, '`5 169:2-174:3')
    i2 = block1.emit(GlobalRead, 'zUser', [], Int(), None, None)
    block1.next = Goto(block2, None)
    i4 = block2.emit_phi([block1, block4, block6, block7], [i2, None, None, None], Int())
    block2.next = Return(i4, None)
    i5 = block3.emit(Operation, '@eq_bits_bv_bv', [zp, SmallBitVectorConstant(0b01, SmallFixedBitVector(2))], Bool(), '`5 171:4-171:8', 'zz410')
    block3.next = ConditionalGoto(i5, block4, block5, '`5 169:2-174:3')
    i6 = block4.emit(GlobalRead, 'zSupervisor', [], Int(), None, None)
    i4.prevvalues[1] = i6
    block4.next = Goto(block2, None)
    i8 = block5.emit(Operation, '@eq_bits_bv_bv', [zp, SmallBitVectorConstant(0b11, SmallFixedBitVector(2))], Bool(), '`5 172:4-172:8', 'zz46')
    block5.next = ConditionalGoto(i8, block6, block7, '`5 169:2-174:3')
    i9 = block6.emit(GlobalRead, 'zMachine', [], Int(), None, None)
    i4.prevvalues[2] = i9
    block6.next = Goto(block2, None)
    i11 = block7.emit(Cast, '$cast', [zp], GenericBitVector(), '`5 173:77-173:86', 'zz44')
    i12 = block7.emit(Operation, 'zstring_of_bits', [i11], String(), '`5 173:77-173:86', 'zz43')
    i14 = block7.emit(Operation, 'zinternal_errorzIEPrivilegez5zK', [], Int(), '`5 173:12-173:87', 'zz40')
    i4.prevvalues[3] = i14
    block7.next = Goto(block2, None)
    graph = Graph('zprivLevel_of_bits', [zp], block0)

    assert set(topo_order(graph)) == set(graph.iterblocks())

def test_toposort_best_attempt():
    zn = Argument('zn', Int())
    zregs = Argument('zregs', Vec(SmallFixedBitVector(5)))
    block0 = Block()
    block1 = Block()
    block2 = Block()
    block3 = Block()
    block4 = Block()
    block5 = Block()
    block6 = Block()
    block7 = Block()
    block8 = Block()
    block9 = Block()
    block10 = Block()
    block11 = Block()
    block12 = Block()
    i2 = block0.emit(Operation, 'zhaveZdinx', [], Bool(), '`40 295:5-295:16', 'zz417')
    block0.next = ConditionalGoto(i2, block1, block12, '`40 295:5-295:37')
    block1.next = Goto(block2, None)
    i3 = block2.emit_phi([block12, block1], [BooleanConstant.FALSE, BooleanConstant.TRUE], Bool())
    block2.next = ConditionalGoto(i3, block3, block11, '`40 295:2-297:49')
    i4 = block3.emit(Operation, 'zz5i64zDzKz5i', [MachineIntConstant(0)], Int(), '`40 296:20-296:21', 'zz416')
    i5 = block3.emit(Operation, 'zz5izDzKz5i64', [i4], MachineInt(), '`40 296:20-296:21', 'zz42')
    i6 = block3.emit(Operation, 'zz5i64zDzKz5i', [MachineIntConstant(1)], Int(), '`40 296:26-296:31', 'zz414')
    i7 = block3.emit(Operation, 'zsub_atom', [zn, i6], Int(), '`40 296:26-296:31', 'zz415')
    i8 = block3.emit(Operation, 'zz5izDzKz5i64', [i7], MachineInt(), '`40 296:26-296:31', 'zz43')
    i9 = block3.emit(Operation, 'zz5i64zDzKz5i', [MachineIntConstant(1)], Int(), '`40 296:4-297:49', 'zz413')
    i10 = block3.emit(Operation, 'zz5izDzKz5i64', [i9], MachineInt(), '`40 296:4-297:49', 'zz44')
    block3.next = Goto(block4, None)
    i11 = block4.emit_phi([block3, block10], [i5, None], MachineInt())
    i12 = block4.emit(Operation, '@gt', [i11, i8], Bool(), '`40 296:4-297:49', None)
    block4.next = ConditionalGoto(i12, block5, block8, '`40 296:4-297:49')
    block5.next = Goto(block6, None)
    block6.next = Goto(block7, None)
    i13 = block7.emit_phi([block9, block6], [BooleanConstant.FALSE, BooleanConstant.TRUE], Bool())
    block7.next = Return(i13, None)
    i14 = block8.emit(Operation, 'zz5i64zDzKz5i', [i11], Int(), '`40 297:10-297:17', 'zz412')
    i15 = block8.emit(Operation, 'zplain_vector_accesszIB5zK', [zregs, i14], SmallFixedBitVector(5), '`40 297:10-297:17', 'zz49')
    i16 = block8.emit(Operation, 'zz5i64zDzKz5i', [MachineIntConstant(0)], Int(), '`40 297:10-297:20', 'zz410')
    i17 = block8.emit(Cast, '$cast', [i15], GenericBitVector(), '`40 297:10-297:20', 'zz411')
    i18 = block8.emit(Operation, 'zbitvector_access', [i17, i16], SmallFixedBitVector(1), '`40 297:10-297:20', 'zz48')
    i19 = block8.emit(GlobalRead, 'bitone', [], SmallFixedBitVector(1), None, None)
    i20 = block8.emit(Operation, 'zeq_bit', [i18, i19], Bool(), '`40 297:10-297:30', 'zz47')
    block8.next = ConditionalGoto(i20, block9, block10, '`40 297:6-297:49')
    block9.next = Goto(block7, None)
    i21 = block10.emit(Operation, '@iadd', [i11, i10], MachineInt(), '`40 296:4-297:49', 'zz45')
    i11.prevvalues[1] = i21
    block10.next = Goto(block4, None)
    block11.next = Goto(block6, None)
    block12.next = Goto(block2, None)
    graph = Graph('zvalidDoubleRegs', [zn, zregs], block0, True)
    topo_order_best_attempt(graph)

def test_constfold_lteq():
    block0 = Block()
    i1 = block0.emit(Operation, '@lteq', [MachineIntConstant(64), MachineIntConstant(1)], Bool(), '`2 141:32-141:48', 'zz40')
    block0.next = Return(i1, None)
    graph = Graph('f', [], block0)
    check_optimize(graph, """\
block0 = Block()
block0.next = Return(BooleanConstant.FALSE, None)
graph = Graph('f', [], block0)""")


def test_cast_of_phi():
    arg2 = Argument('arg2', SmallFixedBitVector(5))
    arg4 = Argument('arg4', SmallFixedBitVector(5))
    block1 = Block()
    block2 = Block()
    block3 = Block()
    block4 = Block()
    block5 = Block()
    block6 = Block()
    block7 = Block()
    block8 = Block()
    i5 = block1.emit(Operation, 'zrX_bits', [arg2], SmallFixedBitVector(64), '`43 266:16-266:22', 'zz43006')
    i6 = block1.emit(Operation, 'zz5i64zDzKz5i', [MachineIntConstant(0)], Int(), '`43 268:18-268:19', 'zz43055')
    i7 = block1.emit(Operation, 'zz5izDzKz5i64', [i6], MachineInt(), '`43 268:18-268:19', 'zz43009')
    i8 = block1.emit(Operation, 'zz5i64zDzKz5i', [MachineIntConstant(56)], Int(), '`14475', 'zz43054')
    i9 = block1.emit(Operation, 'zz5izDzKz5i64', [i8], MachineInt(), '`14476', 'zz43010')
    i10 = block1.emit(Operation, 'zz5i64zDzKz5i', [MachineIntConstant(8)], Int(), '`43 268:45-268:46', 'zz43053')
    i11 = block1.emit(Operation, 'zz5izDzKz5i64', [i10], MachineInt(), '`43 268:45-268:46', 'zz43011')
    block1.next = Goto(block2, None)
    i17 = block2.emit_phi([block1, block7], [SmallBitVectorConstant(0x0000000000000000, SmallFixedBitVector(64)), None], SmallFixedBitVector(64))
    i24 = block2.emit_phi([block1, block7], [i7, None], MachineInt())
    i26 = block2.emit(Operation, '@gt', [i24, i9], Bool(), '`43 268:2-271:36', None)
    block2.next = ConditionalGoto(i26, block3, block5, '`43 268:2-271:36')
    i27 = block3.emit(Operation, 'zwX_bits', [arg4, i17], Unit(), '`43 272:2-272:7', 'zz43008')
    block3.next = Goto(block4, None)
    block4.next = Return(MachineIntConstant(23), None)
    i29 = block5.emit(Operation, 'zz5i64zDzKz5i', [MachineIntConstant(7)], Int(), '`43 269:12-269:17', 'zz43050')
    i30 = block5.emit(Operation, 'zz5i64zDzKz5i', [i24], Int(), '`43 269:12-269:17', 'zz43051')
    i31 = block5.emit(Operation, 'add_int', [i30, i29], Int(), '`43 269:12-269:17', 'zz43052')
    i32 = block5.emit(Operation, 'zz5izDzKz5i64', [i31], MachineInt(), '`43 269:12-269:17', 'zz43015')
    i33 = block5.emit(Operation, 'zz5i64zDzKz5i', [MachineIntConstant(7)], Int(), '`43 269:39-269:44', 'zz43047')
    i34 = block5.emit(Operation, 'zz5i64zDzKz5i', [i24], Int(), '`43 269:39-269:44', 'zz43048')
    i35 = block5.emit(Operation, 'add_int', [i34, i33], Int(), '`43 269:39-269:44', 'zz43049')
    i36 = block5.emit(Operation, 'zz5izDzKz5i64', [i35], MachineInt(), '`43 269:39-269:44', 'zz43043')
    i37 = block5.emit(Cast, '$cast', [i5], GenericBitVector(), '`43 269:30-269:51', 'zz43044')
    i38 = block5.emit(Operation, 'zz5i64zDzKz5i', [i36], Int(), '`43 269:30-269:51', 'zz43045')
    i39 = block5.emit(Operation, 'zz5i64zDzKz5i', [i24], Int(), '`43 269:30-269:51', 'zz43046')
    i40 = block5.emit(Operation, 'vector_subrange', [i37, i38, i39], GenericBitVector(), '`43 269:30-269:51', 'zz43022')
    i41 = block5.emit(Operation, 'zz5i64zDzKz5i', [i24], Int(), '`14481', 'zz43041')
    i43 = block5.emit(Operation, 'zz5izDzKz5i64', [i41], MachineInt(), '`14484', 'zz43037')
    i44 = block5.emit(Operation, 'zz5i64zDzKz5i', [MachineIntConstant(7)], Int(), '`14486', 'zz43038')
    i45 = block5.emit(Operation, 'zz5i64zDzKz5i', [i43], Int(), '`14488', 'zz43039')
    i46 = block5.emit(Operation, 'add_int', [i45, i44], Int(), '`14490', 'zz43040')
    i47 = block5.emit(Operation, 'zz5izDzKz5i64', [i46], MachineInt(), '`14491', 'zz43030')
    i48 = block5.emit(Operation, 'zz5i64zDzKz5i', [i24], Int(), '`14494', 'zz43035')
    i50 = block5.emit(Operation, 'zz5izDzKz5i64', [i48], MachineInt(), '`14497', 'zz43031')
    i51 = block5.emit(Operation, 'zz5i64zDzKz5i', [i47], Int(), '`14499', 'zz43032')
    i52 = block5.emit(Operation, 'zz5i64zDzKz5i', [i50], Int(), '`14501', 'zz43033')
    i53 = block5.emit(Operation, 'sub_int', [i51, i52], Int(), '`14503', 'zz43034')
    i54 = block5.emit(Operation, 'zz5izDzKz5i64', [i53], MachineInt(), '`14504', 'zz43026')
    i55 = block5.emit(Operation, 'zz5i64zDzKz5i', [MachineIntConstant(1)], Int(), '`14506', 'zz43027')
    i56 = block5.emit(Operation, 'zz5i64zDzKz5i', [i54], Int(), '`14508', 'zz43028')
    i57 = block5.emit(Operation, 'add_int', [i56, i55], Int(), '`14510', 'zz43029')
    i58 = block5.emit(Operation, 'zz5izDzKz5i64', [i57], MachineInt(), '`14511', 'zz43024')
    i59 = block5.emit(Operation, 'zz5i64zDzKz5i', [i58], Int(), '`43 269:55-269:62', 'zz43025')
    i60 = block5.emit(Operation, 'zzzeros_implicit', [i59], GenericBitVector(), '`43 269:55-269:62', 'zz43023')
    i61 = block5.emit(Operation, 'zeq_bits', [i40, i60], Bool(), '`43 269:30-269:62', 'zz43021')
    block5.next = ConditionalGoto(i61, block6, block8, '`43 269:27-271:36')
    i62 = block6.emit(Cast, '$cast', [SmallBitVectorConstant(0x00, SmallFixedBitVector(8))], GenericBitVector(), '`43 270:32-270:36', 'zz43016')
    block6.next = Goto(block7, None)
    i63 = block7.emit_phi([block8, block6], [None, i62], GenericBitVector())
    i64 = block7.emit(Cast, '$cast', [i17], GenericBitVector(), '`43 269:4-269:24', 'zz43017')
    i65 = block7.emit(Operation, 'zz5i64zDzKz5i', [i32], Int(), '`43 269:4-269:24', 'zz43018')
    i66 = block7.emit(Operation, 'zz5i64zDzKz5i', [i24], Int(), '`43 269:4-269:24', 'zz43019')
    i67 = block7.emit(Operation, 'vector_update_subrange', [i64, i65, i66, i63], GenericBitVector(), '`43 269:4-269:24', 'zz43020')
    i68 = block7.emit(Cast, '$cast', [i67], SmallFixedBitVector(64), '`43 269:4-269:24', 'zz43007')
    i17.prevvalues[1] = i68
    i69 = block7.emit(Operation, '@iadd', [i24, i11], MachineInt(), '`43 268:2-271:36', 'zz43013')
    i24.prevvalues[1] = i69
    block7.next = Goto(block2, None)
    i70 = block8.emit(Cast, '$cast', [SmallBitVectorConstant(0xFF, SmallFixedBitVector(8))], GenericBitVector(), '`43 271:32-271:36', 'zz43016')
    i63.prevvalues[0] = i70
    block8.next = Goto(block7, None)
    graph = Graph('zexecute', [arg2, arg4], block1)
    graph.has_loop = True
    graph.check()
    check_optimize(graph, """\
arg2 = Argument('arg2', SmallFixedBitVector(5))
arg4 = Argument('arg4', SmallFixedBitVector(5))
block0 = Block()
block1 = Block()
block2 = Block()
block3 = Block()
block4 = Block()
block5 = Block()
block6 = Block()
i2 = block0.emit(Operation, 'zrX_bits', [arg2], SmallFixedBitVector(64), '`43 266:16-266:22', 'zz43006')
block0.next = Goto(block1, None)
i3 = block1.emit_phi([block0, block5], [SmallBitVectorConstant(0, SmallFixedBitVector(64)), None], SmallFixedBitVector(64))
i4 = block1.emit_phi([block0, block5], [MachineIntConstant(0), None], MachineInt())
i5 = block1.emit(Operation, '@gt', [i4, MachineIntConstant(56)], Bool(), '`43 268:2-271:36', None)
block1.next = ConditionalGoto(i5, block2, block3, '`43 268:2-271:36')
i6 = block2.emit(Operation, 'zwX_bits', [arg4, i3], Unit(), '`43 272:2-272:7', 'zz43008')
block2.next = Return(MachineIntConstant(23), None)
i7 = block3.emit(Operation, '@add_i_i_must_fit', [i4, MachineIntConstant(7)], MachineInt(), '`43 269:12-269:17', 'zz43052')
i8 = block3.emit(Cast, '$cast', [i2], GenericBitVector(), '`43 269:30-269:51', 'zz43044')
i9 = block3.emit(Operation, '@vector_subrange_o_i_i', [i8, i7, i4], GenericBitVector(), '`43 269:30-269:51', 'zz43022')
i10 = block3.emit(Operation, '@sub_i_i_must_fit', [i7, i4], MachineInt(), '`14503', 'zz43034')
i11 = block3.emit(Operation, '@add_i_i_wrapped_res', [i10, MachineIntConstant(1)], Int(), '`14510', 'zz43029')
i12 = block3.emit(Operation, 'zzzeros_implicit', [i11], GenericBitVector(), '`43 269:55-269:62', 'zz43023')
i13 = block3.emit(Operation, 'zeq_bits', [i9, i12], Bool(), '`43 269:30-269:62', 'zz43021')
block3.next = ConditionalGoto(i13, block4, block6, '`43 269:27-271:36')
block4.next = Goto(block5, None)
i14 = block5.emit_phi([block6, block4], [SmallBitVectorConstant(255, SmallFixedBitVector(8)), SmallBitVectorConstant(0, SmallFixedBitVector(8))], SmallFixedBitVector(8))
i15 = block5.emit(Cast, '$cast', [i14], GenericBitVector(), None, None)
i16 = block5.emit(Cast, '$cast', [i3], GenericBitVector(), '`43 269:4-269:24', 'zz43017')
i17 = block5.emit(Operation, '@vector_update_subrange_o_i_i_o', [i16, i7, i4, i15], GenericBitVector(), '`43 269:4-269:24', 'zz43020')
i18 = block5.emit(Cast, '$cast', [i17], SmallFixedBitVector(64), '`43 269:4-269:24', 'zz43007')
i3.prevvalues[1] = i18
i19 = block5.emit(Operation, '@iadd', [i4, MachineIntConstant(8)], MachineInt(), '`43 268:2-271:36', 'zz43013')
i4.prevvalues[1] = i19
block5.next = Goto(block1, None)
block6.next = Goto(block5, None)
graph = Graph('zexecute', [arg2, arg4], block0, True)
""")


def test_shift_0():
    arg = Argument('arg', GenericBitVector())
    block0 = Block()
    i1 = block0.emit(Operation, '@shiftl_o_i', [arg, MachineIntConstant(0)], GenericBitVector(), '`2 337:4-337:35', 'return')
    block0.next = Return(i1, None)
    graph = Graph('f', [arg], block0)
    check_optimize(graph, """\
arg = Argument('arg', GenericBitVector())
block0 = Block()
block0.next = Return(arg, None)
graph = Graph('f', [arg], block0)""")

def test_constfold_MachineInt():
    block0 = Block()
    i1 = block0.emit(Operation, '@unsigned_bv', [SmallBitVectorConstant('0xC03', SmallFixedBitVector(12)), MachineIntConstant(12)], MachineInt(), '`1 231:32-231:43', 'zz40')
    i2 = block0.emit(Operation, '@add_i_i_wrapped_res', [i1, MachineIntConstant(-75)], Int(), None, None)
    block0.next = Return(i2, None)
    graph = Graph('f', [], block0)
    check_optimize(graph, """\
block0 = Block()
block0.next = Return(IntConstant(3000), None)
graph = Graph('f', [], block0)""")

def test_constfold_SmallFixedBitVector(): 
    block0 = Block()
    i1 = block0.emit(Operation, '@zero_extend_bv_i_i', [SmallBitVectorConstant('0b1', SmallFixedBitVector(1)), MachineIntConstant(1), MachineIntConstant(39)], SmallFixedBitVector(39), None, None)
    block0.next = Return(i1, None)
    graph = Graph('f', [], block0)
    check_optimize(graph, """\
block0 = Block()
block0.next = Return(SmallBitVectorConstant('0b000000000000000000000000000000000000001', SmallFixedBitVector(39)), None)
graph = Graph('f', [], block0)""")

def test_truncate():
    arg = Argument('arg', SmallFixedBitVector(64))
    block0 = Block()
    i1 = block0.emit(Cast, '$cast', [arg], GenericBitVector(), None, None)
    i2 = block0.emit(Operation, '@sail_truncate_o_i', [i1, MachineIntConstant(64)], GenericBitVector(), '`4 80:17-80:31', 'return')
    i3 = block0.emit(Operation, '@sail_truncate_o_i', [i2, MachineIntConstant(52)], GenericBitVector(), '`4 80:17-80:31', 'return')
    i4 = block0.emit(Cast, '$cast', [i3], SmallFixedBitVector(52), None, None)
    block0.next = Return(i4, None)
    graph = Graph('f', [arg], block0)
    check_optimize(graph, """\
arg = Argument('arg', SmallFixedBitVector(64))
block0 = Block()
i1 = block0.emit(Operation, '@truncate_bv_i', [arg, MachineIntConstant(52)], SmallFixedBitVector(52), '`4 80:17-80:31', 'return')
block0.next = Return(i1, None)
graph = Graph('f', [arg], block0)""")

def test_remove_double_exception():
    block0 = Block()
    block1 = Block()
    block2 = Block()
    block3 = Block()
    block4 = Block()
    block5 = Block()
    block6 = Block()
    block23 = Block()
    i2 = block0.emit(Operation, 'z__IMPDEF_integer_map', [], Int(), '`6 70:11-70:34', 'zz40')
    i3 = block0.emit(GlobalRead, 'have_exception', [], Bool(), None, None)
    block0.next = ConditionalGoto(i3, block1, block23, '`6 70:11-70:34')
    block1.next = Goto(block2, None)
    i4 = block2.emit_phi([block23, block1], [i2, DefaultValue(Int())], Int())
    i5 = block2.emit(GlobalRead, 'have_exception', [], Bool(), None, None)
    block2.next = ConditionalGoto(i5, block3, block4, '`7 1261:17-1261:66')
    block3.next = Return(DefaultValue(MachineInt()), None)
    i6 = block4.emit(Operation, '@eq_int_o_i', [i4, MachineIntConstant(32)], Bool(), '`7 1262:11-1262:22', 'zz46')
    block4.next = Goto(block5, None)
    block5.next = Goto(block6, None)
    i8 = block6.emit(Operation, 'zsail_assert', [i6, StringConstant('')], Unit(), '`7 1262:4-1263:17', 'zz45')
    i9 = block6.emit(Operation, 'zz5izDzKz5i64', [i4], MachineInt(), '`7 1263:4-1263:17', 'zz43')
    block6.next = Return(i9, None)
    block23.next = Goto(block2, None)
    graph = Graph('zAArch64_PAMax', [], block0)
    remove_double_exception_check(graph, fakecodegen)
    res = print_graph_construction(graph)
    got = "\n".join(res)
    assert got == '''\
block0 = Block()
block1 = Block()
block2 = Block()
i0 = block0.emit(Operation, 'z__IMPDEF_integer_map', [], Int(), '`6 70:11-70:34', 'zz40')
i1 = block0.emit(GlobalRead, 'have_exception', [], Bool(), None, None)
block0.next = ConditionalGoto(i1, block1, block2, '`6 70:11-70:34')
block1.next = Return(DefaultValue(MachineInt()), None)
i2 = block2.emit(Operation, '@eq_int_o_i', [i0, MachineIntConstant(32)], Bool(), '`7 1262:11-1262:22', 'zz46')
i3 = block2.emit(Operation, 'zsail_assert', [i2, StringConstant('')], Unit(), '`7 1262:4-1263:17', 'zz45')
i4 = block2.emit(Operation, 'zz5izDzKz5i64', [i0], MachineInt(), '`7 1263:4-1263:17', 'zz43')
block2.next = Return(i4, None)
graph = Graph('zAArch64_PAMax', [], block0)'''

def test_anticipated_cast():
    arg = Argument('arg', GenericBitVector())
    block0 = Block()
    block1 = Block()
    block2 = Block()
    block3 = Block()
    block4 = Block()
    block5 = Block()
    block6 = Block()
    block7 = Block()
    block8 = Block()
    block9 = Block()
    block10 = Block()
    block11 = Block()
    block12 = Block()
    block13 = Block()
    block14 = Block()
    block15 = Block()
    block16 = Block()
    block17 = Block()
    i0 = block0.emit(Operation, 'z__IMPDEF_integer_map', [], Int(), '`6 70:11-70:34', 'zz40')
    i1 = block0.emit(GlobalRead, 'have_exception', [], Bool(), None, None)
    block0.next = ConditionalGoto(i1, block1, block2, '`6 70:11-70:34')
    block1.next = Return(DefaultValue(MachineInt()), None)
    i2 = block2.emit(Operation, '@eq_int_o_i', [i0, MachineIntConstant(32)], Bool(), '`7 1262:11-1262:22', 'zz46')
    block2.next = ConditionalGoto(i2, block3, block5, '`7 1262:11-1262:106')
    block3.next = Goto(block4, None)
    i3 = block4.emit_phi([block7, block3], [None, BooleanConstant.TRUE], Bool())
    i4 = block4.emit(Operation, 'zsail_assert', [i3, StringConstant('')], Unit(), '`7 1262:4-1263:17', 'zz45')
    i5 = block4.emit(Operation, 'zz5izDzKz5i64', [i0], MachineInt(), '`7 1263:4-1263:17', 'zz43')
    block4.next = Return(i5, None)
    i6 = block5.emit(Operation, '@eq_int_o_i', [i0, MachineIntConstant(36)], Bool(), '`7 1262:25-1262:36', 'zz48')
    block5.next = ConditionalGoto(i6, block6, block8, '`7 1262:25-1262:106')
    block6.next = Goto(block7, None)
    i7 = block7.emit_phi([block10, block6], [None, BooleanConstant.TRUE], Bool())
    i3.prevvalues[0] = i7
    block7.next = Goto(block4, None)
    i8 = block8.emit(Operation, '@eq_int_o_i', [i0, MachineIntConstant(40)], Bool(), '`7 1262:39-1262:50', 'zz410')
    block8.next = ConditionalGoto(i8, block9, block11, '`7 1262:39-1262:106')
    block9.next = Goto(block10, None)
    i9 = block10.emit_phi([block13, block9], [None, BooleanConstant.TRUE], Bool())
    i7.prevvalues[0] = i9
    block10.next = Goto(block7, None)
    i10 = block11.emit(Operation, '@eq_int_o_i', [i0, MachineIntConstant(42)], Bool(), '`7 1262:53-1262:64', 'zz412')
    block11.next = ConditionalGoto(i10, block12, block14, '`7 1262:53-1262:106')
    block12.next = Goto(block13, None)
    i11 = block13.emit_phi([block16, block12], [None, BooleanConstant.TRUE], Bool())
    i9.prevvalues[0] = i11
    i100 = block13.emit(Cast, '$cast', [arg], SmallFixedBitVector(64), None, None)
    block13.next = Goto(block10, None)
    i12 = block14.emit(Operation, '@eq_int_o_i', [i0, MachineIntConstant(44)], Bool(), '`7 1262:67-1262:78', 'zz414')
    block14.next = ConditionalGoto(i12, block15, block17, '`7 1262:67-1262:106')
    block15.next = Goto(block16, None)
    i13 = block16.emit_phi([block17, block15], [None, BooleanConstant.TRUE], Bool())
    i11.prevvalues[0] = i13
    block16.next = Goto(block13, None)
    i14 = block17.emit(Operation, '@eq_int_o_i', [i0, MachineIntConstant(48)], Bool(), '`7 1262:81-1262:92', 'zz416')
    block17.next = Goto(block16, None)
    i13.prevvalues[0] = i14
    graph = Graph('zAArch64_PAMax', [arg], block0)
    casts = find_anticipated_casts(graph)
    for block in graph.iterblocks():
        s = casts[block]
        if block in (block0, block1):
            assert s == set()
        elif block in (block11, block12, block13, block14, block15, block16, block17):
            assert s == {(arg, SmallFixedBitVector(64)), (i0, MachineInt())}
        else:
            assert s == {(i0, MachineInt())}
    optimize(graph, fakecodegen)
    res = print_graph_construction(graph)
    got = "\n".join(res)
    assert got == '''\
arg = Argument('arg', GenericBitVector())
block0 = Block()
block1 = Block()
block2 = Block()
block3 = Block()
block4 = Block()
block5 = Block()
block6 = Block()
block7 = Block()
block8 = Block()
block9 = Block()
block10 = Block()
block11 = Block()
block12 = Block()
block13 = Block()
block14 = Block()
block15 = Block()
block16 = Block()
block17 = Block()
i1 = block0.emit(Operation, 'z__IMPDEF_integer_map', [], Int(), '`6 70:11-70:34', 'zz40')
i2 = block0.emit(GlobalRead, 'have_exception', [], Bool(), None, None)
block0.next = ConditionalGoto(i2, block1, block2, '`6 70:11-70:34')
block1.next = Return(DefaultValue(MachineInt()), None)
i3 = block2.emit(Operation, 'zz5izDzKz5i64', [i1], MachineInt(), None, None)
i4 = block2.emit(Operation, '@eq', [i3, MachineIntConstant(32)], Bool(), '`7 1262:11-1262:22', 'zz46')
block2.next = ConditionalGoto(i4, block3, block5, '`7 1262:11-1262:106')
block3.next = Goto(block4, None)
i5 = block4.emit_phi([block7, block3], [None, BooleanConstant.TRUE], Bool())
i6 = block4.emit(Operation, 'zsail_assert', [i5, StringConstant('')], Unit(), '`7 1262:4-1263:17', 'zz45')
block4.next = Return(i3, None)
i7 = block5.emit(Operation, '@eq', [i3, MachineIntConstant(36)], Bool(), '`7 1262:25-1262:36', 'zz48')
block5.next = ConditionalGoto(i7, block6, block8, '`7 1262:25-1262:106')
block6.next = Goto(block7, None)
i8 = block7.emit_phi([block10, block6], [None, BooleanConstant.TRUE], Bool())
i5.prevvalues[0] = i8
block7.next = Goto(block4, None)
i9 = block8.emit(Operation, '@eq', [i3, MachineIntConstant(40)], Bool(), '`7 1262:39-1262:50', 'zz410')
block8.next = ConditionalGoto(i9, block9, block11, '`7 1262:39-1262:106')
block9.next = Goto(block10, None)
i10 = block10.emit_phi([block13, block9], [None, BooleanConstant.TRUE], Bool())
i8.prevvalues[0] = i10
block10.next = Goto(block7, None)
i11 = block11.emit(Operation, '@eq', [i3, MachineIntConstant(42)], Bool(), '`7 1262:53-1262:64', 'zz412')
block11.next = ConditionalGoto(i11, block12, block14, '`7 1262:53-1262:106')
block12.next = Goto(block13, None)
i12 = block13.emit_phi([block16, block12], [None, BooleanConstant.TRUE], Bool())
i10.prevvalues[0] = i12
block13.next = Goto(block10, None)
i13 = block14.emit(Operation, '@eq', [i3, MachineIntConstant(44)], Bool(), '`7 1262:67-1262:78', 'zz414')
block14.next = ConditionalGoto(i13, block15, block17, '`7 1262:67-1262:106')
block15.next = Goto(block16, None)
i14 = block16.emit_phi([block17, block15], [None, BooleanConstant.TRUE], Bool())
i12.prevvalues[0] = i14
block16.next = Goto(block13, None)
i15 = block17.emit(Operation, '@eq', [i3, MachineIntConstant(48)], Bool(), '`7 1262:81-1262:92', 'zz416')
i14.prevvalues[0] = i15
block17.next = Goto(block16, None)
graph = Graph('zAArch64_PAMax', [arg], block0)'''

def test_anticipated_cast_bv():
    zv = Argument('zv', SmallFixedBitVector(32))
    zshift = Argument('zshift', SmallFixedBitVector(5))
    block0 = Block()
    i2 = block0.emit(Operation, 'zz5i64zDzKz5i', [MachineIntConstant(64)], Int(), '`1 252:25-252:39', 'zz49')
    i3 = block0.emit(Cast, '$cast', [zv], GenericBitVector(), '`1 252:25-252:39', 'zz410')
    i4 = block0.emit(Comment, 'inlined zsign_extend', [], Unit(), None, None)
    i5 = block0.emit(Operation, 'zz5izDzKz5i64', [i2], MachineInt(), None, None)
    i6 = block0.emit(Operation, '@sign_extend_o_i', [i3, i5], GenericBitVector(), '`1 193:29-193:51', 'return')
    i7 = block0.emit(Cast, '$cast', [i6], SmallFixedBitVector(64), '`1 252:25-252:39', 'zz40')
    i8 = block0.emit(Cast, '$cast', [i7], GenericBitVector(), '`1 253:5-253:17', 'zz46')
    i9 = block0.emit(Cast, '$cast', [zshift], GenericBitVector(), '`1 253:5-253:17', 'zz47')
    i10 = block0.emit(Operation, 'shift_bits_right', [i8, i9], GenericBitVector(), '`1 253:5-253:17', 'zz48')
    i11 = block0.emit(Cast, '$cast', [i10], SmallFixedBitVector(64), '`1 253:5-253:17', 'zz41')
    i12 = block0.emit(Operation, 'zz5i64zDzKz5i', [MachineIntConstant(31)], Int(), '`1 253:4-253:25', 'zz42')
    i13 = block0.emit(Operation, 'zz5i64zDzKz5i', [MachineIntConstant(0)], Int(), '`1 253:4-253:25', 'zz43')
    i14 = block0.emit(Cast, '$cast', [i11], GenericBitVector(), '`1 253:4-253:25', 'zz44')
    i15 = block0.emit(Operation, 'vector_subrange', [i14, i12, i13], GenericBitVector(), '`1 253:4-253:25', 'zz45')
    i16 = block0.emit(Cast, '$cast', [i15], SmallFixedBitVector(32), '`1 253:4-253:25', 'return')
    block0.next = Return(i16, None)
    graph = Graph('zshift_right_arith32', [zv, zshift], block0)
    check_optimize(graph, '''
zv = Argument('zv', SmallFixedBitVector(32))
zshift = Argument('zshift', SmallFixedBitVector(5))
block0 = Block()
i2 = block0.emit(Comment, 'inlined zsign_extend', [], Unit(), None, None)
i3 = block0.emit(Operation, '@sign_extend_bv_i_i', [zv, MachineIntConstant(32), MachineIntConstant(64)], SmallFixedBitVector(64), '`1 193:29-193:51', 'return')
i4 = block0.emit(Cast, '$cast', [i3], GenericBitVector(), '`1 253:5-253:17', 'zz46')
i5 = block0.emit(Cast, '$cast', [zshift], GenericBitVector(), '`1 253:5-253:17', 'zz47')
i6 = block0.emit(Operation, 'shift_bits_right', [i4, i5], GenericBitVector(), '`1 253:5-253:17', 'zz48')
i7 = block0.emit(Cast, '$cast', [i6], SmallFixedBitVector(64), None, None)
i8 = block0.emit(Operation, '@vector_subrange_fixed_bv_i_i', [i7, MachineIntConstant(31), MachineIntConstant(0)], SmallFixedBitVector(32), '`1 253:4-253:25', 'zz45')
block0.next = Return(i8, None)
graph = Graph('zshift_right_arith32', [zv, zshift], block0)
''')

def test_cse():
    zaddr = Argument('zaddr', SmallFixedBitVector(64))
    zwidth = Argument('zwidth', SmallFixedBitVector(64))
    bv1 = Argument('bv1', GenericBitVector())
    bv2 = Argument('bv2', GenericBitVector())
    block2 = Block()
    block3 = Block()
    block4 = Block()
    block5 = Block()
    block6 = Block()
    block7 = Block()
    block8 = Block()
    block9 = Block()
    block10 = Block()
    block11 = Block()
    block12 = Block()
    block13 = Block()
    block14 = Block()
    block15 = Block()
    block16 = Block()
    block17 = Block()
    block18 = Block()
    block19 = Block()
    block20 = Block()
    i10 = block3.emit(Operation, 'sail_unsigned', [bv2], Int(), '`1 231:32-231:43', 'zz40')
    i11 = block3.emit(Operation, 'sail_unsigned', [bv1], Int(), '`1 231:47-231:58', 'zz41')
    i12 = block3.emit(Operation, 'lteq', [i10, i11], Bool(), '`1 231:32-231:58', 'return')
    block3.next = ConditionalGoto(i12, block4, block7, '`14 127:22-135:23')
    i13 = block4.emit(GlobalRead, 'zPMP_NoMatch', [], Int(), None, None)
    block4.next = Goto(block5, None)
    i14 = block5.emit_phi([block11, block4], [None, i13], Int())
    block5.next = Goto(block6, None)
    block6.next = Return(i14, None)
    i16 = block7.emit(Operation, '@add_bits_bv_bv', [zaddr, zwidth, MachineIntConstant(64)], SmallFixedBitVector(64), '`14 130:33-130:45', 'zz425')
    i18 = block7.emit(Operation, '@unsigned_bv_wrapped_res', [i16, MachineIntConstant(64)], Int(), '`1 231:32-231:43', 'zz40')
    i19 = block7.emit(Operation, 'sail_unsigned', [bv1], Int(), '`1 231:47-231:58', 'zz41')
    i20 = block7.emit(Operation, 'lteq', [i18, i19], Bool(), '`1 231:32-231:58', 'return')
    block7.next = ConditionalGoto(i20, block8, block19, '`14 130:32-130:71')
    block8.next = Goto(block9, None)
    i21 = block9.emit_phi([block19, block8], [None, BooleanConstant.TRUE], Bool())
    block9.next = ConditionalGoto(i21, block10, block12, '`14 130:24-134:48')
    i22 = block10.emit(GlobalRead, 'zPMP_NoMatch', [], Int(), None, None)
    block10.next = Goto(block11, None)
    i23 = block11.emit_phi([block16, block10], [None, i22], Int())
    i14.prevvalues[0] = i23
    block11.next = Goto(block5, None)
    i25 = block12.emit(Operation, 'sail_unsigned', [bv1], Int(), '`1 231:32-231:43', 'zz40')
    i26 = block12.emit(Operation, '@unsigned_bv_wrapped_res', [zaddr, MachineIntConstant(64)], Int(), '`1 231:47-231:58', 'zz41')
    i27 = block12.emit(Operation, 'lteq', [i25, i26], Bool(), '`1 231:32-231:58', 'return')
    block12.next = ConditionalGoto(i27, block13, block18, '`14 132:32-132:71')
    i28 = block13.emit(Operation, '@add_bits_bv_bv', [zaddr, zwidth, MachineIntConstant(64)], SmallFixedBitVector(64), '`14 132:50-132:62', 'zz413')
    i30 = block13.emit(Operation, '@unsigned_bv_wrapped_res', [i28, MachineIntConstant(64)], Int(), '`1 231:32-231:43', 'zz40')
    i31 = block13.emit(Operation, 'sail_unsigned', [bv2], Int(), '`1 231:47-231:58', 'zz41')
    i32 = block13.emit(Operation, 'lteq', [i30, i31], Bool(), '`1 231:32-231:58', 'return')
    block13.next = Goto(block14, None)
    i33 = block14.emit_phi([block18, block13], [BooleanConstant.FALSE, i32], Bool())
    block14.next = ConditionalGoto(i33, block15, block17, '`14 132:29-134:48')
    i34 = block15.emit(GlobalRead, 'zPMP_Match', [], Int(), None, None)
    block15.next = Goto(block16, None)
    i35 = block16.emit_phi([block17, block15], [None, i34], Int())
    i23.prevvalues[0] = i35
    block16.next = Goto(block11, None)
    i36 = block17.emit(GlobalRead, 'zPMP_PartialMatch', [], Int(), None, None)
    i35.prevvalues[0] = i36
    block17.next = Goto(block16, None)
    block18.next = Goto(block14, None)
    i38 = block19.emit(Operation, 'sail_unsigned', [bv2], Int(), '`1 231:32-231:43', 'zz40')
    i39 = block19.emit(Operation, '@unsigned_bv_wrapped_res', [zaddr, MachineIntConstant(64)], Int(), '`1 231:47-231:58', 'zz41')
    i40 = block19.emit(Operation, 'lteq', [i38, i39], Bool(), '`1 231:32-231:58', 'return')
    i21.prevvalues[0] = i40
    block19.next = Goto(block9, None)
    block20.next = Goto(block6, None)
    graph = Graph('match', [zaddr, zwidth, bv1, bv2], block3)
    cse(graph, fakecodegen)
    res = print_graph_construction(graph)
    got = "\n".join(res)
    assert got == '''\
zaddr = Argument('zaddr', SmallFixedBitVector(64))
zwidth = Argument('zwidth', SmallFixedBitVector(64))
bv1 = Argument('bv1', GenericBitVector())
bv2 = Argument('bv2', GenericBitVector())
block0 = Block()
block1 = Block()
block2 = Block()
block3 = Block()
block4 = Block()
block5 = Block()
block6 = Block()
block7 = Block()
block8 = Block()
block9 = Block()
block10 = Block()
block11 = Block()
block12 = Block()
block13 = Block()
block14 = Block()
block15 = Block()
block16 = Block()
i4 = block0.emit(Operation, 'sail_unsigned', [bv2], Int(), '`1 231:32-231:43', 'zz40')
i5 = block0.emit(Operation, 'sail_unsigned', [bv1], Int(), '`1 231:47-231:58', 'zz41')
i6 = block0.emit(Operation, 'lteq', [i4, i5], Bool(), '`1 231:32-231:58', 'return')
block0.next = ConditionalGoto(i6, block1, block4, '`14 127:22-135:23')
i7 = block1.emit(GlobalRead, 'zPMP_NoMatch', [], Int(), None, None)
block1.next = Goto(block2, None)
i8 = block2.emit_phi([block8, block1], [None, i7], Int())
block2.next = Goto(block3, None)
block3.next = Return(i8, None)
i9 = block4.emit(Operation, '@add_bits_bv_bv', [zaddr, zwidth, MachineIntConstant(64)], SmallFixedBitVector(64), '`14 130:33-130:45', 'zz425')
i10 = block4.emit(Operation, '@unsigned_bv_wrapped_res', [i9, MachineIntConstant(64)], Int(), '`1 231:32-231:43', 'zz40')
i11 = block4.emit(Operation, 'lteq', [i10, i5], Bool(), '`1 231:32-231:58', 'return')
block4.next = ConditionalGoto(i11, block5, block16, '`14 130:32-130:71')
block5.next = Goto(block6, None)
i12 = block6.emit_phi([block16, block5], [None, BooleanConstant.TRUE], Bool())
block6.next = ConditionalGoto(i12, block7, block9, '`14 130:24-134:48')
i13 = block7.emit(GlobalRead, 'zPMP_NoMatch', [], Int(), None, None)
block7.next = Goto(block8, None)
i14 = block8.emit_phi([block13, block7], [None, i13], Int())
i8.prevvalues[0] = i14
block8.next = Goto(block2, None)
i15 = block9.emit(Operation, '@unsigned_bv_wrapped_res', [zaddr, MachineIntConstant(64)], Int(), '`1 231:47-231:58', 'zz41')
i16 = block9.emit(Operation, 'lteq', [i5, i15], Bool(), '`1 231:32-231:58', 'return')
block9.next = ConditionalGoto(i16, block10, block15, '`14 132:32-132:71')
i17 = block10.emit(Operation, 'lteq', [i10, i4], Bool(), '`1 231:32-231:58', 'return')
block10.next = Goto(block11, None)
i18 = block11.emit_phi([block15, block10], [BooleanConstant.FALSE, i17], Bool())
block11.next = ConditionalGoto(i18, block12, block14, '`14 132:29-134:48')
i19 = block12.emit(GlobalRead, 'zPMP_Match', [], Int(), None, None)
block12.next = Goto(block13, None)
i20 = block13.emit_phi([block14, block12], [None, i19], Int())
i14.prevvalues[0] = i20
block13.next = Goto(block8, None)
i21 = block14.emit(GlobalRead, 'zPMP_PartialMatch', [], Int(), None, None)
i20.prevvalues[0] = i21
block14.next = Goto(block13, None)
block15.next = Goto(block11, None)
i22 = block16.emit(Operation, '@unsigned_bv_wrapped_res', [zaddr, MachineIntConstant(64)], Int(), '`1 231:47-231:58', 'zz41')
i23 = block16.emit(Operation, 'lteq', [i4, i22], Bool(), '`1 231:32-231:58', 'return')
i12.prevvalues[0] = i23
block16.next = Goto(block6, None)
graph = Graph('match', [zaddr, zwidth, bv1, bv2], block0)'''

def test_rotater():
    zv = Argument('zv', GenericBitVector())
    zn = Argument('zn', Int())
    block0 = Block()
    i2 = block0.emit(Operation, 'zz5izDzKz5i64', [zn], MachineInt(), None, None)
    i3 = block0.emit(Operation, '@shiftr_o_i', [zv, i2], GenericBitVector(), '`1 268:5-268:11', 'zz40')
    i4 = block0.emit(Operation, '@length_unwrapped_res', [zv], MachineInt(), '`1 268:22-268:31', 'zz43')
    i5 = block0.emit(Operation, 'zz5i64zDzKz5i', [i4], Int(), '`1 268:22-268:31', None)
    i6 = block0.emit(Operation, 'sub_int', [i5, zn], Int(), '`1 268:22-268:35', 'zz42')
    i7 = block0.emit(Operation, 'zz5izDzKz5i64', [i6], MachineInt(), None, None)
    i8 = block0.emit(Operation, '@shiftl_o_i', [zv, i7], GenericBitVector(), '`1 268:16-268:36', 'zz41')
    i9 = block0.emit(Operation, 'or_bits', [i3, i8], GenericBitVector(), '`1 268:4-268:37', 'return')
    block0.next = Return(i9, None)
    graph = Graph('zrotater', [zv, zn], block0)
    check_optimize(graph, '''
zv = Argument('zv', GenericBitVector())
zn = Argument('zn', Int())
block0 = Block()
i2 = block0.emit(Operation, 'zz5izDzKz5i64', [zn], MachineInt(), None, None)
i3 = block0.emit(Operation, '@shiftr_o_i', [zv, i2], GenericBitVector(), '`1 268:5-268:11', 'zz40')
i4 = block0.emit(Operation, '@length_unwrapped_res', [zv], MachineInt(), '`1 268:22-268:31', 'zz43')
i5 = block0.emit(Operation, '@sub_i_i_must_fit', [i4, i2], MachineInt(), '`1 268:22-268:35', 'zz42')
i6 = block0.emit(Operation, '@shiftl_o_i', [zv, i5], GenericBitVector(), '`1 268:16-268:36', 'zz41')
i7 = block0.emit(Operation, 'or_bits', [i3, i6], GenericBitVector(), '`1 268:4-268:37', 'return')
block0.next = Return(i7, None)
graph = Graph('zrotater', [zv, zn], block0)
''')

def test_is_ones_subrange():
    zxs = Argument('zxs', GenericBitVector())
    zi = Argument('zi', Int())
    zj = Argument('zj', Int())
    block0 = Block()
    block1 = Block()
    block2 = Block()
    block3 = Block()
    block4 = Block()
    block5 = Block()
    block6 = Block()
    i3 = block0.emit(Operation, '@length_unwrapped_res', [zxs], MachineInt(), '`3', 'zz42')
    i4 = block0.emit(Operation, 'zz5i64zDzKz5i', [i3], Int(), '`3', None)
    i5 = block0.emit(Operation, 'sub_int', [zi, zj], Int(), '`4 116:34-116:37', 'zz44')
    i6 = block0.emit(Operation, '@add_o_i_wrapped_res', [i5, MachineIntConstant(1)], Int(), '`4 116:34-116:39', 'zz43')
    i8 = block0.emit(Operation, 'gteq_int', [i6, i4], Bool(), '`2 336:5-336:11', 'zz40')
    block0.next = ConditionalGoto(i8, block1, block3, '`2 336:2-341:3')
    i10 = block1.emit(Operation, '@zeros_i', [i3], GenericBitVector(), '`2 320:32-320:45', 'zz40')
    i11 = block1.emit(Operation, 'not_bits', [i10], GenericBitVector(), '`2 320:24-320:46', 'return')
    i12 = block1.emit(Operation, 'zz5izDzKz5i64', [zj], MachineInt(), None, None)
    i13 = block1.emit(Operation, '@shiftl_o_i', [i11, i12], GenericBitVector(), '`2 337:4-337:35', 'return')
    block1.next = Goto(block2, None)
    i14 = block2.emit_phi([block5, block1], [None, i13], GenericBitVector())
    i15 = block2.emit(Operation, 'and_bits', [zxs, i14], GenericBitVector(), '`4 117:3-117:9', 'zz41')
    i16 = block2.emit(Operation, 'eq_bits', [i15, i14], Bool(), '`4 117:2-117:15', 'return')
    block2.next = Return(i16, None)
    i17 = block3.emit(Operation, 'zz5izDzKz5i64', [i6], MachineInt(), None, None)
    i18 = block3.emit(Cast, '$cast', [SmallBitVectorConstant('0b1', SmallFixedBitVector(1))], GenericBitVector(), '`2 339:25-339:57', 'zz46')
    i20 = block3.emit(Operation, '@lteq', [i3, MachineIntConstant(1)], Bool(), '`2 141:32-141:48', 'zz40')
    block3.next = ConditionalGoto(i20, block4, block6, '`2 141:29-141:100')
    i21 = block4.emit(Operation, '@sail_truncate_o_i', [i18, i3], GenericBitVector(), '`2 141:54-141:70', 'return')
    block4.next = Goto(block5, None)
    i22 = block5.emit_phi([block6, block4], [None, i21], GenericBitVector())
    i23 = block5.emit(Operation, '@shiftl_o_i', [i22, i17], GenericBitVector(), '`2 340:28-340:50', 'zz44')
    i24 = block5.emit(Operation, 'sub_int', [i23, i22], GenericBitVector(), '`2 340:19-340:56', 'zz43')
    i25 = block5.emit(Operation, 'zz5izDzKz5i64', [zj], MachineInt(), None, None)
    i26 = block5.emit(Operation, '@shiftl_o_i', [i24, i25], GenericBitVector(), '`2 340:4-340:60', 'return')
    i14.prevvalues[0] = i26
    block5.next = Goto(block2, None)
    i27 = block6.emit(Operation, '@zero_extend_o_i', [i18, i3], GenericBitVector(), '`2 141:76-141:100', 'return')
    i22.prevvalues[0] = i27
    block6.next = Goto(block5, None)
    graph = Graph('zis_ones_subrange', [zxs, zi, zj], block0)
    check_optimize(graph, '''
zxs = Argument('zxs', GenericBitVector())
zi = Argument('zi', Int())
zj = Argument('zj', Int())
block0 = Block()
block1 = Block()
block2 = Block()
block3 = Block()
block4 = Block()
block5 = Block()
block6 = Block()
i3 = block0.emit(Operation, '@length_unwrapped_res', [zxs], MachineInt(), '`3', 'zz42')
i4 = block0.emit(Operation, 'zz5i64zDzKz5i', [i3], Int(), '`3', None)
i5 = block0.emit(Operation, 'zz5izDzKz5i64', [zj], MachineInt(), None, None)
i6 = block0.emit(Operation, '@sub_o_i_wrapped_res', [zi, i5], Int(), '`4 116:34-116:37', 'zz44')
i7 = block0.emit(Operation, '@add_o_i_wrapped_res', [i6, MachineIntConstant(1)], Int(), '`4 116:34-116:39', 'zz43')
i8 = block0.emit(Operation, 'gteq_int', [i7, i4], Bool(), '`2 336:5-336:11', 'zz40')
block0.next = ConditionalGoto(i8, block1, block3, '`2 336:2-341:3')
i9 = block1.emit(Operation, '@zeros_i', [i3], GenericBitVector(), '`2 320:32-320:45', 'zz40')
i10 = block1.emit(Operation, 'not_bits', [i9], GenericBitVector(), '`2 320:24-320:46', 'return')
i11 = block1.emit(Operation, '@shiftl_o_i', [i10, i5], GenericBitVector(), '`2 337:4-337:35', 'return')
block1.next = Goto(block2, None)
i12 = block2.emit_phi([block5, block1], [None, i11], GenericBitVector())
i13 = block2.emit(Operation, 'and_bits', [zxs, i12], GenericBitVector(), '`4 117:3-117:9', 'zz41')
i14 = block2.emit(Operation, 'eq_bits', [i13, i12], Bool(), '`4 117:2-117:15', 'return')
block2.next = Return(i14, None)
i15 = block3.emit(Operation, 'zz5izDzKz5i64', [i7], MachineInt(), None, None)
i16 = block3.emit(Cast, '$cast', [SmallBitVectorConstant('0b1', SmallFixedBitVector(1))], GenericBitVector(), '`2 339:25-339:57', 'zz46')
i17 = block3.emit(Operation, '@lteq', [i3, MachineIntConstant(1)], Bool(), '`2 141:32-141:48', 'zz40')
block3.next = ConditionalGoto(i17, block4, block6, '`2 141:29-141:100')
i18 = block4.emit(Operation, '@sail_truncate_o_i', [i16, i3], GenericBitVector(), '`2 141:54-141:70', 'return')
block4.next = Goto(block5, None)
i19 = block5.emit_phi([block6, block4], [None, i18], GenericBitVector())
i20 = block5.emit(Operation, '@shiftl_o_i', [i19, i15], GenericBitVector(), '`2 340:28-340:50', 'zz44')
i21 = block5.emit(Operation, 'sub_int', [i20, i19], GenericBitVector(), '`2 340:19-340:56', 'zz43')
i22 = block5.emit(Operation, '@shiftl_o_i', [i21, i5], GenericBitVector(), '`2 340:4-340:60', 'return')
i12.prevvalues[0] = i22
block5.next = Goto(block2, None)
i23 = block6.emit(Operation, '@zero_extend_o_i', [i16, i3], GenericBitVector(), '`2 141:76-141:100', 'return')
i19.prevvalues[0] = i23
block6.next = Goto(block5, None)
graph = Graph('zis_ones_subrange', [zxs, zi, zj], block0)
''')

def test_read_kind_of_flags():
    zaq = Argument('zaq', Bool())
    zrl = Argument('zrl', Bool())
    zres = Argument('zres', Bool())
    block0 = Block()
    block1 = Block()
    block2 = Block()
    block3 = Block()
    block4 = Block()
    block5 = Block()
    block6 = Block()
    block7 = Block()
    block8 = Block()
    block9 = Block()
    block10 = Block()
    block11 = Block()
    block12 = Block()
    block13 = Block()
    block14 = Block()
    block15 = Block()
    block16 = Block()
    block17 = Block()
    block18 = Block()
    block19 = Block()
    block20 = Block()
    block21 = Block()
    block22 = Block()
    block23 = Block()
    block24 = Block()
    block25 = Block()
    block26 = Block()
    block27 = Block()
    block28 = Block()
    block29 = Block()
    block30 = Block()
    block31 = Block()
    block32 = Block()
    block33 = Block()
    block34 = Block()
    block35 = Block()
    block36 = Block()
    block37 = Block()
    block38 = Block()
    block39 = Block()
    block40 = Block()
    block41 = Block()
    block42 = Block()
    block43 = Block()
    block44 = Block()
    block45 = Block()
    block46 = Block()
    block47 = Block()
    block48 = Block()
    block49 = Block()
    block50 = Block()
    block51 = Block()
    block52 = Block()
    block53 = Block()
    block54 = Block()
    block55 = Block()
    block56 = Block()
    block57 = Block()
    block58 = Block()
    block59 = Block()
    block60 = Block()
    block61 = Block()
    block62 = Block()
    block63 = Block()
    block64 = Block()
    block65 = Block()
    i3 = block0.emit(Operation, 'eq_bool', [zres, BooleanConstant.FALSE], Bool(), '`3490', 'zz463')
    block0.next = ConditionalGoto(i3, block1, block65, '`27 105:4-105:45')
    i4 = block1.emit(Operation, 'eq_bool', [zrl, BooleanConstant.FALSE], Bool(), '`3491', 'zz464')
    block1.next = Goto(block2, None)
    i5 = block2.emit_phi([block65, block1], [BooleanConstant.FALSE, i4], Bool())
    block2.next = ConditionalGoto(i5, block3, block64, '`27 105:4-105:45')
    i6 = block3.emit(Operation, 'eq_bool', [zaq, BooleanConstant.FALSE], Bool(), '`3492', 'zz461')
    block3.next = Goto(block4, None)
    i7 = block4.emit_phi([block64, block3], [BooleanConstant.FALSE, i6], Bool())
    block4.next = ConditionalGoto(i7, block5, block7, '`27 104:2-113:3')
    i8 = block5.emit(GlobalRead, 'zRead_plain', [], Int(), None, None)
    i9 = block5.emit(Operation, 'zSomezIEread_kindz5zK', [i8], Int(), '`27 105:29-105:45', 'zz40')
    block5.next = Goto(block6, None)
    i10 = block6.emit_phi([block5, block12, block18, block24, block30, block36, block42, block48], [i9, None, None, None, None, None, None, None], Int())
    block6.next = Return(i10, None)
    i11 = block7.emit(Operation, 'eq_bool', [zres, BooleanConstant.FALSE], Bool(), '`3493', 'zz455')
    block7.next = ConditionalGoto(i11, block8, block63, '`27 106:4-106:53')
    i12 = block8.emit(Operation, 'eq_bool', [zrl, BooleanConstant.FALSE], Bool(), '`3494', 'zz456')
    block8.next = Goto(block9, None)
    i13 = block9.emit_phi([block63, block8], [BooleanConstant.FALSE, i12], Bool())
    block9.next = ConditionalGoto(i13, block10, block62, '`27 106:4-106:53')
    i14 = block10.emit(Operation, 'eq_bool', [zaq, BooleanConstant.TRUE], Bool(), '`3495', 'zz453')
    block10.next = Goto(block11, None)
    i15 = block11.emit_phi([block62, block10], [BooleanConstant.FALSE, i14], Bool())
    block11.next = ConditionalGoto(i15, block12, block13, '`27 104:2-113:3')
    i16 = block12.emit(GlobalRead, 'zRead_RISCV_acquire', [], Int(), None, None)
    i17 = block12.emit(Operation, 'zSomezIEread_kindz5zK', [i16], Int(), '`27 106:29-106:53', 'zz40')
    i10.prevvalues[1] = i17
    block12.next = Goto(block6, None)
    i18 = block13.emit(Operation, 'eq_bool', [zres, BooleanConstant.FALSE], Bool(), '`3496', 'zz447')
    block13.next = ConditionalGoto(i18, block14, block61, '`27 107:4-107:60')
    i19 = block14.emit(Operation, 'eq_bool', [zrl, BooleanConstant.TRUE], Bool(), '`3497', 'zz448')
    block14.next = Goto(block15, None)
    i20 = block15.emit_phi([block61, block14], [BooleanConstant.FALSE, i19], Bool())
    block15.next = ConditionalGoto(i20, block16, block60, '`27 107:4-107:60')
    i21 = block16.emit(Operation, 'eq_bool', [zaq, BooleanConstant.TRUE], Bool(), '`3498', 'zz445')
    block16.next = Goto(block17, None)
    i22 = block17.emit_phi([block60, block16], [BooleanConstant.FALSE, i21], Bool())
    block17.next = ConditionalGoto(i22, block18, block19, '`27 104:2-113:3')
    i23 = block18.emit(GlobalRead, 'zRead_RISCV_strong_acquire', [], Int(), None, None)
    i24 = block18.emit(Operation, 'zSomezIEread_kindz5zK', [i23], Int(), '`27 107:29-107:60', 'zz40')
    i10.prevvalues[2] = i24
    block18.next = Goto(block6, None)
    i25 = block19.emit(Operation, 'eq_bool', [zres, BooleanConstant.TRUE], Bool(), '`3499', 'zz439')
    block19.next = ConditionalGoto(i25, block20, block59, '`27 108:4-108:54')
    i26 = block20.emit(Operation, 'eq_bool', [zrl, BooleanConstant.FALSE], Bool(), '`3500', 'zz440')
    block20.next = Goto(block21, None)
    i27 = block21.emit_phi([block59, block20], [BooleanConstant.FALSE, i26], Bool())
    block21.next = ConditionalGoto(i27, block22, block58, '`27 108:4-108:54')
    i28 = block22.emit(Operation, 'eq_bool', [zaq, BooleanConstant.FALSE], Bool(), '`3501', 'zz437')
    block22.next = Goto(block23, None)
    i29 = block23.emit_phi([block58, block22], [BooleanConstant.FALSE, i28], Bool())
    block23.next = ConditionalGoto(i29, block24, block25, '`27 104:2-113:3')
    i30 = block24.emit(GlobalRead, 'zRead_RISCV_reserved', [], Int(), None, None)
    i31 = block24.emit(Operation, 'zSomezIEread_kindz5zK', [i30], Int(), '`27 108:29-108:54', 'zz40')
    i10.prevvalues[3] = i31
    block24.next = Goto(block6, None)
    i32 = block25.emit(Operation, 'eq_bool', [zres, BooleanConstant.TRUE], Bool(), '`3502', 'zz431')
    block25.next = ConditionalGoto(i32, block26, block57, '`27 109:4-109:62')
    i33 = block26.emit(Operation, 'eq_bool', [zrl, BooleanConstant.FALSE], Bool(), '`3503', 'zz432')
    block26.next = Goto(block27, None)
    i34 = block27.emit_phi([block57, block26], [BooleanConstant.FALSE, i33], Bool())
    block27.next = ConditionalGoto(i34, block28, block56, '`27 109:4-109:62')
    i35 = block28.emit(Operation, 'eq_bool', [zaq, BooleanConstant.TRUE], Bool(), '`3504', 'zz429')
    block28.next = Goto(block29, None)
    i36 = block29.emit_phi([block56, block28], [BooleanConstant.FALSE, i35], Bool())
    block29.next = ConditionalGoto(i36, block30, block31, '`27 104:2-113:3')
    i37 = block30.emit(GlobalRead, 'zRead_RISCV_reserved_acquire', [], Int(), None, None)
    i38 = block30.emit(Operation, 'zSomezIEread_kindz5zK', [i37], Int(), '`27 109:29-109:62', 'zz40')
    i10.prevvalues[4] = i38
    block30.next = Goto(block6, None)
    i39 = block31.emit(Operation, 'eq_bool', [zres, BooleanConstant.TRUE], Bool(), '`3505', 'zz423')
    block31.next = ConditionalGoto(i39, block32, block55, '`27 110:4-110:69')
    i40 = block32.emit(Operation, 'eq_bool', [zrl, BooleanConstant.TRUE], Bool(), '`3506', 'zz424')
    block32.next = Goto(block33, None)
    i41 = block33.emit_phi([block55, block32], [BooleanConstant.FALSE, i40], Bool())
    block33.next = ConditionalGoto(i41, block34, block54, '`27 110:4-110:69')
    i42 = block34.emit(Operation, 'eq_bool', [zaq, BooleanConstant.TRUE], Bool(), '`3507', 'zz421')
    block34.next = Goto(block35, None)
    i43 = block35.emit_phi([block54, block34], [BooleanConstant.FALSE, i42], Bool())
    block35.next = ConditionalGoto(i43, block36, block37, '`27 104:2-113:3')
    i44 = block36.emit(GlobalRead, 'zRead_RISCV_reserved_strong_acquire', [], Int(), None, None)
    i45 = block36.emit(Operation, 'zSomezIEread_kindz5zK', [i44], Int(), '`27 110:29-110:69', 'zz40')
    i10.prevvalues[5] = i45
    block36.next = Goto(block6, None)
    i46 = block37.emit(Operation, 'eq_bool', [zres, BooleanConstant.FALSE], Bool(), '`3508', 'zz415')
    block37.next = ConditionalGoto(i46, block38, block53, '`27 111:4-111:35')
    i47 = block38.emit(Operation, 'eq_bool', [zrl, BooleanConstant.TRUE], Bool(), '`3509', 'zz416')
    block38.next = Goto(block39, None)
    i48 = block39.emit_phi([block53, block38], [BooleanConstant.FALSE, i47], Bool())
    block39.next = ConditionalGoto(i48, block40, block52, '`27 111:4-111:35')
    i49 = block40.emit(Operation, 'eq_bool', [zaq, BooleanConstant.FALSE], Bool(), '`3510', 'zz413')
    block40.next = Goto(block41, None)
    i50 = block41.emit_phi([block52, block40], [BooleanConstant.FALSE, i49], Bool())
    block41.next = ConditionalGoto(i50, block42, block43, '`27 104:2-113:3')
    i51 = block42.emit(Operation, 'zNonezIEread_kindz5zK', [], Int(), '`27 111:29-111:35', 'zz40')
    i10.prevvalues[6] = i51
    block42.next = Goto(block6, None)
    i52 = block43.emit(Operation, 'eq_bool', [zres, BooleanConstant.TRUE], Bool(), '`3511', 'zz47')
    block43.next = ConditionalGoto(i52, block44, block51, '`27 112:4-112:35')
    i53 = block44.emit(Operation, 'eq_bool', [zrl, BooleanConstant.TRUE], Bool(), '`3512', 'zz48')
    block44.next = Goto(block45, None)
    i54 = block45.emit_phi([block51, block44], [BooleanConstant.FALSE, i53], Bool())
    block45.next = ConditionalGoto(i54, block46, block50, '`27 112:4-112:35')
    i55 = block46.emit(Operation, 'eq_bool', [zaq, BooleanConstant.FALSE], Bool(), '`3513', 'zz45')
    block46.next = Goto(block47, None)
    i56 = block47.emit_phi([block50, block46], [BooleanConstant.FALSE, i55], Bool())
    block47.next = ConditionalGoto(i56, block48, block49, '`27 104:2-113:3')
    i57 = block48.emit(Operation, 'zNonezIEread_kindz5zK', [], Int(), '`27 112:29-112:35', 'zz40')
    i10.prevvalues[7] = i57
    block48.next = Goto(block6, None)
    block49.next = Raise(StringConstant("'match'"), '`27 104:2-113:3')
    block50.next = Goto(block47, None)
    block51.next = Goto(block45, None)
    block52.next = Goto(block41, None)
    block53.next = Goto(block39, None)
    block54.next = Goto(block35, None)
    block55.next = Goto(block33, None)
    block56.next = Goto(block29, None)
    block57.next = Goto(block27, None)
    block58.next = Goto(block23, None)
    block59.next = Goto(block21, None)
    block60.next = Goto(block17, None)
    block61.next = Goto(block15, None)
    block62.next = Goto(block11, None)
    block63.next = Goto(block9, None)
    block64.next = Goto(block4, None)
    block65.next = Goto(block2, None)
    graph = Graph('zread_kind_of_flags', [zaq, zrl, zres], block0)
    check_optimize(graph, '''
zaq = Argument('zaq', Bool())
zrl = Argument('zrl', Bool())
zres = Argument('zres', Bool())
block0 = Block()
block1 = Block()
block2 = Block()
block3 = Block()
block4 = Block()
block5 = Block()
block6 = Block()
block7 = Block()
block8 = Block()
block9 = Block()
block10 = Block()
block11 = Block()
block12 = Block()
block13 = Block()
block14 = Block()
block15 = Block()
block16 = Block()
block17 = Block()
block18 = Block()
block19 = Block()
block20 = Block()
block21 = Block()
block22 = Block()
block23 = Block()
block24 = Block()
block25 = Block()
block26 = Block()
block27 = Block()
block28 = Block()
block29 = Block()
block30 = Block()
block31 = Block()
block32 = Block()
block33 = Block()
block0.next = ConditionalGoto(zres, block1, block31, '`27 105:4-105:45')
block1.next = ConditionalGoto(zres, block2, block28, '`27 106:4-106:53')
block2.next = ConditionalGoto(zres, block3, block25, '`27 107:4-107:60')
block3.next = ConditionalGoto(zres, block4, block5, '`27 108:4-108:54')
block4.next = ConditionalGoto(zrl, block5, block23, '`27 108:4-108:54')
block5.next = ConditionalGoto(zres, block6, block7, '`27 109:4-109:62')
block6.next = ConditionalGoto(zrl, block7, block21, '`27 109:4-109:62')
block7.next = ConditionalGoto(zres, block8, block12, '`27 110:4-110:69')
block8.next = ConditionalGoto(zrl, block9, block12, '`27 110:4-110:69')
block9.next = ConditionalGoto(zaq, block10, block12, '`27 104:2-113:3')
i3 = block10.emit(GlobalRead, 'zRead_RISCV_reserved_strong_acquire', [], Int(), None, None)
i4 = block10.emit(Operation, 'zSomezIEread_kindz5zK', [i3], Int(), '`27 110:29-110:69', 'zz40')
block10.next = Goto(block11, None)
i5 = block11.emit_phi([block33, block30, block27, block24, block22, block10, block20, block17], [None, None, None, None, None, i4, None, None], Int())
block11.next = Return(i5, None)
block12.next = ConditionalGoto(zres, block13, block18, '`27 111:4-111:35')
block13.next = ConditionalGoto(zres, block14, block16, '`27 112:4-112:35')
block14.next = ConditionalGoto(zrl, block15, block16, '`27 112:4-112:35')
block15.next = ConditionalGoto(zaq, block16, block17, '`27 104:2-113:3')
block16.next = Raise(StringConstant("'match'"), '`27 104:2-113:3')
i6 = block17.emit(Operation, 'zNonezIEread_kindz5zK', [], Int(), '`27 112:29-112:35', 'zz40')
i5.prevvalues[7] = i6
block17.next = Goto(block11, None)
block18.next = ConditionalGoto(zrl, block19, block13, '`27 111:4-111:35')
block19.next = ConditionalGoto(zaq, block13, block20, '`27 104:2-113:3')
i7 = block20.emit(Operation, 'zNonezIEread_kindz5zK', [], Int(), '`27 111:29-111:35', 'zz40')
i5.prevvalues[6] = i7
block20.next = Goto(block11, None)
block21.next = ConditionalGoto(zaq, block22, block7, '`27 104:2-113:3')
i8 = block22.emit(GlobalRead, 'zRead_RISCV_reserved_acquire', [], Int(), None, None)
i9 = block22.emit(Operation, 'zSomezIEread_kindz5zK', [i8], Int(), '`27 109:29-109:62', 'zz40')
i5.prevvalues[4] = i9
block22.next = Goto(block11, None)
block23.next = ConditionalGoto(zaq, block5, block24, '`27 104:2-113:3')
i10 = block24.emit(GlobalRead, 'zRead_RISCV_reserved', [], Int(), None, None)
i11 = block24.emit(Operation, 'zSomezIEread_kindz5zK', [i10], Int(), '`27 108:29-108:54', 'zz40')
i5.prevvalues[3] = i11
block24.next = Goto(block11, None)
block25.next = ConditionalGoto(zrl, block26, block3, '`27 107:4-107:60')
block26.next = ConditionalGoto(zaq, block27, block3, '`27 104:2-113:3')
i12 = block27.emit(GlobalRead, 'zRead_RISCV_strong_acquire', [], Int(), None, None)
i13 = block27.emit(Operation, 'zSomezIEread_kindz5zK', [i12], Int(), '`27 107:29-107:60', 'zz40')
i5.prevvalues[2] = i13
block27.next = Goto(block11, None)
block28.next = ConditionalGoto(zrl, block2, block29, '`27 106:4-106:53')
block29.next = ConditionalGoto(zaq, block30, block2, '`27 104:2-113:3')
i14 = block30.emit(GlobalRead, 'zRead_RISCV_acquire', [], Int(), None, None)
i15 = block30.emit(Operation, 'zSomezIEread_kindz5zK', [i14], Int(), '`27 106:29-106:53', 'zz40')
i5.prevvalues[1] = i15
block30.next = Goto(block11, None)
block31.next = ConditionalGoto(zrl, block1, block32, '`27 105:4-105:45')
block32.next = ConditionalGoto(zaq, block1, block33, '`27 104:2-113:3')
i16 = block33.emit(GlobalRead, 'zRead_plain', [], Int(), None, None)
i17 = block33.emit(Operation, 'zSomezIEread_kindz5zK', [i16], Int(), '`27 105:29-105:45', 'zz40')
i5.prevvalues[0] = i17
block33.next = Goto(block11, None)
graph = Graph('zread_kind_of_flags', [zaq, zrl, zres], block0)
''')


    # return type Bool()
    # zaddress = Argument('zaddress', SmallFixedBitVector(64))
    # zsizze = Argument('zsizze', Int())
    # zalignment = Argument('zalignment', Int())
    # block0 = Block()
    # i3 = block0.emit(Operation, 'zlteq_int', [zsizze, zalignment], Bool(), '`7 11345:11-11345:28', 'zz416')
    # i4 = block0.emit(Operation, 'zsail_assert', [i3, AstConstant(String(resolved_type=String(), string='"src/v8_base.sail:11345.28-11345.29"'), String())], Unit(), '`7 11344:64-11347:1', 'zz417')
    # i5 = block0.emit(Cast, '$cast', [zaddress], GenericBitVector(), '`7 11346:17-11346:31', 'zz414')
    # i6 = block0.emit(Operation, 'zadd_bits_int', [i5, zsizze], GenericBitVector(), '`7 11346:17-11346:31', 'zz415')
    # i7 = block0.emit(Operation, 'zsub_bits_int', [i6, IntConstant(1)], GenericBitVector(), '`7 11346:17-11346:35', 'zz413')
    # i8 = block0.emit(Comment, 'inlined zAlign', [], Unit(), None, None)
    # i9 = block0.emit(Operation, '@length_unwrapped_res', [i7], MachineInt(), '`7 2889:22-2889:33', 'zz411')
    # i10 = block0.emit(Operation, '@sub_i_i_wrapped_res', [i9, MachineIntConstant(1)], Int(), '`7 2889:22-2889:33', 'zz49')
    # i11 = block0.emit(Operation, 'zlteq_int', [IntConstant(0), i10], Bool(), '`7 2889:22-2889:33', 'zz47')
    # i12 = block0.emit(Operation, 'zsail_assert', [i11, AstConstant(String(resolved_type=String(), string='"src/v8_base.sail:2889.34-2889.35"'), String())], Unit(), '`7 2888:24-2891:1', 'zz48')
    # i13 = block0.emit(Operation, 'zUInt0', [i7], Int(), '`7 2890:20-2890:27', 'zz46')
    # i14 = block0.emit(Comment, 'inlined zAlign__1', [], Unit(), None, None)
    # i15 = block0.emit(Operation, 'zfdiv_int', [i13, zalignment], Int(), '`7 2885:15-2885:24', 'zz41')
    # i16 = block0.emit(Operation, 'zmult_atom', [zalignment, i15], Int(), '`7 2885:11-2885:24', 'zz40')
    # i17 = block0.emit(Operation, '@length_unwrapped_res', [i7], MachineInt(), '`7 2890:32-2890:34', 'zz44')
    # i18 = block0.emit(Operation, '@sub_i_i_wrapped_res', [i17, MachineIntConstant(1)], Int(), '`7 2890:32-2890:38', 'zz42')
    # i19 = block0.emit(Comment, 'inlined zinteger_subrange', [], Unit(), None, None)
    # i20 = block0.emit(Operation, '@add_o_i_wrapped_res', [i18, MachineIntConstant(1)], Int(), '`5 176:53-176:64', 'zz40')
    # i21 = block0.emit(Operation, 'zz5izDzKz5i64', [i20], MachineInt(), None, None)
    # i22 = block0.emit(Operation, '@get_slice_int_i_o_i', [i21, i16, MachineIntConstant(0)], GenericBitVector(), '`5 176:39-176:72', 'return')
    # i23 = block0.emit(Comment, 'inlined zAlign', [], Unit(), None, None)
    # i24 = block0.emit(Operation, 'zsail_assert', [BooleanConstant.TRUE, AstConstant(String(resolved_type=String(), string='"src/v8_base.sail:2889.34-2889.35"'), String())], Unit(), '`7 2888:24-2891:1', 'zz48')
    # i25 = block0.emit(Operation, '@unsigned_bv_wrapped_res', [zaddress, MachineIntConstant(64)], Int(), '`7 2890:20-2890:27', 'zz46')
    # i26 = block0.emit(Comment, 'inlined zAlign__1', [], Unit(), None, None)
    # i27 = block0.emit(Operation, 'zfdiv_int', [i25, zalignment], Int(), '`7 2885:15-2885:24', 'zz41')
    # i28 = block0.emit(Operation, 'zmult_atom', [zalignment, i27], Int(), '`7 2885:11-2885:24', 'zz40')
    # i29 = block0.emit(Comment, 'inlined zinteger_subrange', [], Unit(), None, None)
    # i30 = block0.emit(Operation, '@get_slice_int_i_o_i_unwrapped_res', [MachineIntConstant(64), i28, MachineIntConstant(0)], SmallFixedBitVector(64), '`5 176:39-176:72', 'return')
    # i31 = block0.emit(Cast, '$cast', [i22], SmallFixedBitVector(64), None, None)
    # i32 = block0.emit(Operation, '@eq_bits_bv_bv', [i30, i31], Bool(), '`7 11346:11-11346:76', 'zz40')
    # block0.next = Return(i32, None)
    # graph = Graph('zCheckAllInAlignedQuantity', [zaddress, zsizze, zalignment], block0)

def test_eq_constfold():
    block0 = Block()
    i0 = block0.emit(Operation, '@eq', [MachineIntConstant(2), MachineIntConstant(0)], Bool(), '`7 433:7-433:17', 'zz40')
    block0.next = Return(i0, None)
    g = Graph("nope", [], block0)
    check_optimize(g, '''
block0 = Block()
block0.next = Return(BooleanConstant.FALSE, None)
graph = Graph('nope', [], block0)
''')

def test_inline_loop():
    from pydrofoil.ir import _inline
    zn = Argument('zn', Int())
    zregs = Argument('zregs', Vec(SmallFixedBitVector(5)))
    block0 = Block()
    block1 = Block()
    block2 = Block()
    block3 = Block()
    block4 = Block()
    block5 = Block()
    block6 = Block()
    block7 = Block()
    block8 = Block()
    block9 = Block()
    block10 = Block()
    block11 = Block()
    block12 = Block()
    i2 = block0.emit(Operation, 'zhaveZdinx', [], Bool(), '`40 295:5-295:16', 'zz417')
    block0.next = ConditionalGoto(i2, block1, block12, '`40 295:5-295:37')
    block1.next = Goto(block2, None)
    i4 = block2.emit_phi([block12, block1], [BooleanConstant.FALSE, BooleanConstant.TRUE], Bool())
    block2.next = ConditionalGoto(i4, block3, block11, '`40 295:2-297:49')
    i5 = block3.emit(Operation, '@sub_o_i_wrapped_res', [zn, MachineIntConstant(1)], Int(), '`40 296:26-296:31', 'zz415')
    i6 = block3.emit(Operation, 'zz5izDzKz5i64', [i5], MachineInt(), '`40 296:26-296:31', 'zz43')
    block3.next = Goto(block4, None)
    i8 = block4.emit_phi([block3, block10], [MachineIntConstant(0), None], MachineInt())
    i9 = block4.emit(Operation, '@gt', [i8, i6], Bool(), '`40 296:4-297:49', None)
    block4.next = ConditionalGoto(i9, block5, block8, '`40 296:4-297:49')
    block5.next = Goto(block6, None)
    block6.next = Goto(block7, None)
    i11 = block7.emit_phi([block9, block6], [BooleanConstant.FALSE, BooleanConstant.TRUE], Bool())
    block7.next = Return(i11, None)
    i12 = block8.emit(Operation, '@vector_access_o_i', [zregs, i8], SmallFixedBitVector(5), '`40 297:10-297:17', 'zz49')
    i13 = block8.emit(Operation, '@vector_access_bv_i', [i12, MachineIntConstant(0)], SmallFixedBitVector(1), '`40 297:10-297:20', 'zz48')
    i14 = block8.emit(GlobalRead, 'bitone', [], SmallFixedBitVector(1), None, None)
    i15 = block8.emit(Operation, 'zeq_bit', [i13, i14], Bool(), '`40 297:10-297:30', 'zz47')
    block8.next = ConditionalGoto(i15, block9, block10, '`40 297:6-297:49')
    block9.next = Goto(block7, None)
    i17 = block10.emit(Operation, '@iadd', [i8, MachineIntConstant(1)], MachineInt(), '`40 296:4-297:49', 'zz45')
    i8.prevvalues[1] = i17
    block10.next = Goto(block4, None)
    block11.next = Goto(block6, None)
    block12.next = Goto(block2, None)
    subgraph = Graph('zvalidDoubleRegs', [zn, zregs], block0, True)

    zn = Argument('zn', MachineInt())
    zregs = Argument('zregs', Vec(SmallFixedBitVector(5)))
    block0 = Block()
    i2 = block0.emit(Operation, 'zz5i64zDzKz5i', [MachineIntConstant(4)], Int(), None, None)
    i3 = block0.emit(Operation, 'zvalidDoubleRegs', [i2, zregs], Unit(), None, None)
    block0.next = Return(i3, None)
    graph = Graph('zvalidDoubleRegs_specialized_4_o', [zn, zregs], block0)
    graph.check()

    _inline(graph, block0, 1, subgraph)


def test_sail_assert_true():
    block0 = Block()
    i1 = block0.emit(Operation, 'zsail_assert', [BooleanConstant.TRUE, StringConstant('"src/v8_base.sail:2440.22-2440.23"')], Unit(), '`7 2440:8-2440:23', 'zz4192')
    block0.next = Return(BooleanConstant.TRUE, None)
    graph = Graph('happy_assert', [], block0)
    convert_sail_assert_to_exception(graph, fakecodegen)
    check_optimize(graph, '''
block0 = Block()
i0 = block0.emit(Comment, 'sail_assert src/v8_base.sail:2440.22-2440.23', [], Unit(), None, None)
block0.next = Return(BooleanConstant.TRUE, None)
graph = Graph('happy_assert', [], block0)
''')

def test_sail_assert_to_control_flow():
    a = Argument('a', Bool())
    block0 = Block()
    i1 = block0.emit(Operation, 'zsail_assert', [a, StringConstant('"bad"')], Unit(), None, None)
    block0.next = Return(a, None)
    graph = Graph('f', [a], block0)
    convert_sail_assert_to_exception(graph, fakecodegen)
    res = "\n".join(print_graph_construction(graph))
    assert res == """\
a = Argument('a', Bool())
block0 = Block()
block1 = Block()
block2 = Block()
i1 = block0.emit(Comment, 'sail_assert bad', [], Unit(), None, None)
block0.next = ConditionalGoto(a, block1, block2, None)
block1.next = Return(a, None)
block2.next = Raise(StringConstant('"bad"'), None)
graph = Graph('f', [a], block0)"""


def test_not_bool():
    zp = Argument('zp', Bool())
    zq = Argument('zq', Bool())
    block0 = Block()
    block1 = Block()
    block2 = Block()
    block3 = Block()
    i2 = block0.emit(Operation, 'not', [zp], Bool(), '`5 56:24-56:35', 'zz40')
    block0.next = ConditionalGoto(i2, block1, block3, '`5 56:24-56:39')
    block1.next = Goto(block2, None)
    i3 = block2.emit_phi([block3, block1], [zq, BooleanConstant.TRUE], Bool())
    block2.next = Return(i3, None)
    block3.next = Goto(block2, None)
    graph = Graph('zimplies', [zp, zq], block0)
    check_optimize(graph, '''
zp = Argument('zp', Bool())
zq = Argument('zq', Bool())
block0 = Block()
block1 = Block()
block2 = Block()
block3 = Block()
block0.next = ConditionalGoto(zp, block1, block3, '`5 56:24-56:39')
block1.next = Goto(block2, None)
i2 = block2.emit_phi([block1, block3], [zq, BooleanConstant.TRUE], Bool())
block2.next = Return(i2, None)
block3.next = Goto(block2, None)
graph = Graph('zimplies', [zp, zq], block0)
    ''')

def test_replicate():
    block0 = Block()
    arg = Argument('arg', SmallFixedBitVector(6))

    i47 = block0.emit(Operation, '@vector_access_bv_i', [arg, MachineIntConstant(0)], SmallFixedBitVector(1), '`7 154392:52-154392:64', 'zz4634')
    i48 = block0.emit(Operation, '$zupdate_fbits', [SmallBitVectorConstant('0b0', SmallFixedBitVector(1)), MachineIntConstant(0), i47], SmallFixedBitVector(1), '`7 154392:51-154392:65', 'zz4635')
    i49 = block0.emit(Cast, '$cast', [i48], GenericBitVector(), '`7 154392:41-154392:69', 'zz4632')
    i50 = block0.emit(Operation, '@replicate_bits_o_i', [i49, MachineIntConstant(1)], GenericBitVector(), '`7 154392:41-154392:69', 'zz4633')
    i51 = block0.emit(Cast, '$cast', [i50], SmallFixedBitVector(1), '`7 154392:41-154392:69', 'zz4623')
    i54 = block0.emit(Operation, '@bitvector_concat_bv_bv', [i51, MachineIntConstant(1), SmallBitVectorConstant('0b1', SmallFixedBitVector(1))], SmallFixedBitVector(2), '`7 154392:41-154392:79', 'zz4627')
    i55 = block0.emit(Cast, '$cast', [i54], GenericBitVector(), '`7 154392:31-154392:84', 'zz4621')
    i56 = block0.emit(Operation, '@replicate_bits_o_i', [i55, MachineIntConstant(32)], GenericBitVector(), '`7 154392:31-154392:84', 'zz4622')
    i57 = block0.emit(Cast, '$cast', [i56], SmallFixedBitVector(64), None, None)
    block0.next = Return(i57, None)
    graph = Graph('repl', [arg], block0)
    check_optimize(graph, '''
arg = Argument('arg', SmallFixedBitVector(6))
block0 = Block()
i1 = block0.emit(Operation, '@vector_access_bv_i', [arg, MachineIntConstant(0)], SmallFixedBitVector(1), '`7 154392:52-154392:64', 'zz4634')
i2 = block0.emit(Operation, '@bitvector_concat_bv_bv', [i1, MachineIntConstant(1), SmallBitVectorConstant('0b1', SmallFixedBitVector(1))], SmallFixedBitVector(2), '`7 154392:41-154392:79', 'zz4627')
i3 = block0.emit(Operation, '@replicate_bv_i_i', [i2, MachineIntConstant(2), MachineIntConstant(32)], SmallFixedBitVector(64), '`7 154392:31-154392:84', 'zz4622')
block0.next = Return(i3, None)
graph = Graph('repl', [arg], block0)
''')

def test_update_fbits():
    block0 = Block()
    arg = Argument('arg', SmallFixedBitVector(64))
    i19 = block0.emit(Operation, '@vector_access_bv_i', [arg, MachineIntConstant(0)], SmallFixedBitVector(1), '`10 108666:25-108666:33', 'zz4151')
    i20 = block0.emit(Operation, '$zupdate_fbits', [SmallBitVectorConstant('0b0', SmallFixedBitVector(1)), MachineIntConstant(0), i19], SmallFixedBitVector(1), '`10 108666:24-108666:34', 'zz4152')
    block0.next = Return(i20, None)
    graph = Graph('upd', [arg], block0)
    check_optimize(graph, '''
arg = Argument('arg', SmallFixedBitVector(64))
block0 = Block()
i1 = block0.emit(Operation, '@vector_access_bv_i', [arg, MachineIntConstant(0)], SmallFixedBitVector(1), '`10 108666:25-108666:33', 'zz4151')
block0.next = Return(i1, None)
graph = Graph('upd', [arg], block0)
''')

def test_phi_of_intconst():
    arg = Argument('arg', Bool())
    block0 = Block()
    block1 = Block()
    block2 = Block()
    block3 = Block()
    block0.next = ConditionalGoto(arg, block1, block2, '')
    block1.next = Goto(block3)
    block2.next = Goto(block3)
    i0 = block3.emit_phi([block1, block2], [IntConstant(1), IntConstant(2)], Int())
    i1 = block3.emit(Operation, 'pow2', [i0], Int(), None, None)
    block3.next = Return(i1, None)
    graph = Graph('f', [arg], block0)
    check_optimize(graph, '''
arg = Argument('arg', Bool())
block0 = Block()
block1 = Block()
block2 = Block()
block3 = Block()
block0.next = ConditionalGoto(arg, block1, block3, '')
block1.next = Goto(block2, None)
i1 = block2.emit_phi([block1, block3], [MachineIntConstant(1), MachineIntConstant(2)], MachineInt())
i2 = block2.emit(Operation, '@pow2_i', [i1], Int(), None, None)
block2.next = Return(i2, None)
block3.next = Goto(block2, None)
graph = Graph('f', [arg], block0)
''')

def test_defaultvalue_bv():
    zN = Argument('zN', MachineInt())
    zfpcr = Argument('zfpcr', SmallFixedBitVector(64))
    block0 = Block()
    block1 = Block()
    block2 = Block()
    block3 = Block()
    block4 = Block()
    block5 = Block()
    block6 = Block()
    i6 = block0.emit(Operation, 'zUsingAArch32', [UnitConstant.UNIT], Bool(), '`7 148480:51-148480:65', 'zz427')
    i7 = block0.emit(GlobalRead, 'have_exception', [], Bool(), None, None)
    block0.next = ConditionalGoto(i7, block1, block3, '`7 148480:51-148480:65')
    block1.next = Goto(block2, None)
    i8 = block2.emit_phi([block5, block1], [None, DefaultValue(GenericBitVector())], GenericBitVector())
    block2.next = Return(i8, None)
    i9 = block3.emit(Operation, '@not', [i6], Bool(), '`7 148480:42-148480:66', 'zz426')
    block3.next = ConditionalGoto(i9, block4, block6, '`7 148480:25-148483:9')
    i10 = block4.emit(Operation, '@vector_access_bv_i', [zfpcr, MachineIntConstant(1)], SmallFixedBitVector(1), '`7 148481:7-148481:14', 'zz421')
    block4.next = Goto(block5, None)
    i11 = block5.emit_phi([block6, block4], [SmallBitVectorConstant('0b0', SmallFixedBitVector(1)), i10], SmallFixedBitVector(1))
    i15 = block5.emit(Operation, '@bitvector_concat_bv_bv', [i11, MachineIntConstant(5), SmallBitVectorConstant('0b11111', SmallFixedBitVector(5))], SmallFixedBitVector(6), '`7 148486:12-148486:22', 'zz410')
    i16 = block5.emit(Operation, '@bitvector_concat_bv_bv', [i15, MachineIntConstant(10), SmallBitVectorConstant('0b1000000000', SmallFixedBitVector(10))], SmallFixedBitVector(16), '`7 148486:11-148486:30', 'zz49')
    i17 = block5.emit(Cast, '$cast', [i16], GenericBitVector(), None, None)
    i8.prevvalues[0] = i17
    block5.next = Goto(block2, None)
    block6.next = Goto(block5, None)
    graph = Graph('zFPDefaultNaN__1_specialized_16_o', [zN, zfpcr], block0)
    check_optimize(graph, '''
zN = Argument('zN', MachineInt())
zfpcr = Argument('zfpcr', SmallFixedBitVector(64))
block0 = Block()
block1 = Block()
block2 = Block()
block3 = Block()
block4 = Block()
block5 = Block()
block6 = Block()
i2 = block0.emit(Operation, 'zUsingAArch32', [UnitConstant.UNIT], Bool(), '`7 148480:51-148480:65', 'zz427')
i3 = block0.emit(GlobalRead, 'have_exception', [], Bool(), None, None)
block0.next = ConditionalGoto(i3, block1, block3, '`7 148480:51-148480:65')
block1.next = Goto(block2, None)
i4 = block2.emit_phi([block5, block1], [None, DefaultValue(SmallFixedBitVector(16))], SmallFixedBitVector(16))
i5 = block2.emit(Cast, '$cast', [i4], GenericBitVector(), None, None)
block2.next = Return(i5, None)
block3.next = ConditionalGoto(i2, block4, block6, '`7 148480:25-148483:9')
block4.next = Goto(block5, None)
i6 = block5.emit_phi([block4, block6], [SmallBitVectorConstant('0b0', SmallFixedBitVector(1)), None], SmallFixedBitVector(1))
i7 = block5.emit(Operation, '@bitvector_concat_bv_bv', [i6, MachineIntConstant(5), SmallBitVectorConstant('0b11111', SmallFixedBitVector(5))], SmallFixedBitVector(6), '`7 148486:12-148486:22', 'zz410')
i8 = block5.emit(Operation, '@bitvector_concat_bv_bv', [i7, MachineIntConstant(10), SmallBitVectorConstant('0b1000000000', SmallFixedBitVector(10))], SmallFixedBitVector(16), '`7 148486:11-148486:30', 'zz49')
i4.prevvalues[0] = i8
block5.next = Goto(block2, None)
i9 = block6.emit(Operation, '@vector_access_bv_i', [zfpcr, MachineIntConstant(1)], SmallFixedBitVector(1), '`7 148481:7-148481:14', 'zz421')
i6.prevvalues[1] = i9
block6.next = Goto(block5, None)
graph = Graph('zFPDefaultNaN__1_specialized_16_o', [zN, zfpcr], block0)
''')

def test_div_1():
    a = Argument('a', Int())
    block0 = Block()
    i1 = block0.emit(Operation, 'tdiv_int', [a, IntConstant(1)], Int(), '`1 186:4-186:22', 'zz41')
    i2 = block0.emit(Operation, 'ediv_int', [i1, IntConstant(1)], Int(), '`1 186:4-186:22', 'zz41')
    block0.next = Return(i2, None)
    graph = Graph('f', [a], block0)
    check_optimize(graph, '''
a = Argument('a', Int())
block0 = Block()
block0.next = Return(a, None)
graph = Graph('f', [a], block0)
''')

def test_neq():
    zr = Argument('zr', MachineInt())
    block0 = Block()
    i1 = block0.emit(Operation, '@neq', [zr, MachineIntConstant(0)], Bool(), '`83', 'zz4129')
    i2 = block0.emit(Operation, '@not', [i1], Bool(), '`83', 'zz4129')
    block0.next = Return(i2, None)
    graph = Graph('f', [zr], block0)
    check_optimize(graph, """
zr = Argument('zr', MachineInt())
block0 = Block()
i1 = block0.emit(Operation, '@eq', [zr, MachineIntConstant(0)], Bool(), '`83', 'zz4129')
block0.next = Return(i1, None)
graph = Graph('f', [zr], block0)
""")

def test_must_fit():
    zv = Argument('zv', GenericBitVector())
    zn = Argument('zn', Int())
    block0 = Block()
    i2 = block0.emit(Operation, 'zz5izDzKz5i64', [zn], MachineInt(), None, None)
    i3 = block0.emit(Operation, '@shiftr_o_i', [zv, i2], GenericBitVector(), '`1 268:5-268:11', 'zz40')
    i4 = block0.emit(Operation, '@length_unwrapped_res', [zv], MachineInt(), '`1 268:22-268:31', 'zz43')
    i5 = block0.emit(Operation, '@sub_i_i_wrapped_res', [i4, i2], Int(), '`1 268:22-268:35', 'zz42')
    i6 = block0.emit(Operation, 'zz5izDzKz5i64', [i5], MachineInt(), None, None)
    i7 = block0.emit(Operation, '@shiftl_o_i', [zv, i6], GenericBitVector(), '`1 268:16-268:36', 'zz41')
    i8 = block0.emit(Operation, 'or_bits', [i3, i7], GenericBitVector(), '`1 268:4-268:37', 'return')
    block0.next = Return(i8, None)
    graph = Graph('zrotater', [zv, zn], block0)
    check_optimize(graph, '''
zv = Argument('zv', GenericBitVector())
zn = Argument('zn', Int())
block0 = Block()
i2 = block0.emit(Operation, 'zz5izDzKz5i64', [zn], MachineInt(), None, None)
i3 = block0.emit(Operation, '@shiftr_o_i', [zv, i2], GenericBitVector(), '`1 268:5-268:11', 'zz40')
i4 = block0.emit(Operation, '@length_unwrapped_res', [zv], MachineInt(), '`1 268:22-268:31', 'zz43')
i5 = block0.emit(Operation, '@sub_i_i_must_fit', [i4, i2], MachineInt(), '`1 268:22-268:35', 'zz42')
i6 = block0.emit(Operation, '@shiftl_o_i', [zv, i5], GenericBitVector(), '`1 268:16-268:36', 'zz41')
i7 = block0.emit(Operation, 'or_bits', [i3, i6], GenericBitVector(), '`1 268:4-268:37', 'return')
block0.next = Return(i7, None)
graph = Graph('zrotater', [zv, zn], block0)
''')

def test_add_i_i_wrapped_res_0():
    a = Argument('a', MachineInt())
    block0 = Block()
    i1 = block0.emit(Operation, '@add_i_i_wrapped_res', [MachineIntConstant(0), a], Int(), '`7 154655:32-154655:57', 'zz410')
    block0.next = Return(i1, None)
    graph = Graph('f', [a], block0)
    check_optimize(graph, '''
a = Argument('a', MachineInt())
block0 = Block()
i1 = block0.emit(Operation, 'zz5i64zDzKz5i', [a], Int(), '`7 154655:32-154655:57', None)
block0.next = Return(i1, None)
graph = Graph('f', [a], block0)
''')


def test_narrow_vector_o_i_o():
    a = Argument('a', SmallFixedBitVector(64))
    block0 = Block()
    i18 = block0.emit(Cast, '$cast', [a], GenericBitVector(), '`59 88:19-88:42', 'zz425')
    i20 = block0.emit(Operation, '@vector_update_o_i_o', [i18, MachineIntConstant(0), SmallBitVectorConstant('0b0', SmallFixedBitVector(1))], GenericBitVector(), '`59 88:19-88:42', 'zz426')
    i21 = block0.emit(Cast, '$cast', [i20], SmallFixedBitVector(64), '`59 88:19-88:42', 'zz412')
    block0.next = Return(i21, None)
    graph = Graph('f', [a], block0)
    check_optimize(graph, '''
a = Argument('a', SmallFixedBitVector(64))
block0 = Block()
i1 = block0.emit(Operation, '$zupdate_fbits', [a, MachineIntConstant(0), SmallBitVectorConstant('0b0', SmallFixedBitVector(1))], SmallFixedBitVector(64), '`59 88:19-88:42', 'zz426')
block0.next = Return(i1, None)
graph = Graph('f', [a], block0)
''')
def test_ediv_i_i():
    a = Argument('a', MachineInt())
    block0 = Block()
    i1 = block0.emit(Operation, 'zz5i64zDzKz5i', [a], Int(), '`7 11525:11-11525:20', 'zz4199')
    i2 = block0.emit(Operation, 'ediv_int', [i1, IntConstant(2)], Int(), '`7 11526:20-11526:32', 'zz4179')
    i3 = block0.emit(Operation, 'zz5izDzKz5i64', [i2], MachineInt(), '`7 11526:20-11526:32', 'zz43')
    block0.next = Return(i3, None)
    graph = Graph('f', [a], block0)
    check_optimize(graph, '''
a = Argument('a', MachineInt())
block0 = Block()
i1 = block0.emit(Operation, '@ediv_int_i_ipos', [a, MachineIntConstant(2)], MachineInt(), '`7 11526:20-11526:32', 'zz4179')
block0.next = Return(i1, None)
graph = Graph('f', [a], block0)
''')
